{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./db/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":321},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a modern full-stack web application for Sablia, an AI and automation consulting service. The application features a business automation consultancy website with ROI calculation tools, lead generation forms, and service presentations. The project is built as a monorepo with a React frontend, Express backend, and PostgreSQL database, focusing on showcasing automation solutions and converting visitors into leads.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe frontend is built with React 18 using TypeScript and modern tooling:\n- **Framework**: React with Vite for fast development and building\n- **Routing**: Wouter for lightweight client-side routing\n- **Styling**: Tailwind CSS with custom design system and Radix UI components\n- **State Management**: React Query for server state management\n- **Animations**: Framer Motion for smooth page transitions and micro-interactions\n- **Forms**: React Hook Form with Zod validation for type-safe form handling\n- **UI Components**: Comprehensive component library using Radix UI primitives with custom styling\n\n## Backend Architecture\nThe backend follows a minimal Express.js API pattern:\n- **Framework**: Express.js with TypeScript for type safety\n- **API Design**: RESTful endpoints with JSON responses\n- **Development**: Hot reload with tsx for rapid development\n- **Production Build**: ESBuild for fast bundling and deployment\n- **Error Handling**: Centralized error handling middleware with structured responses\n\n## Data Storage Solutions\nDatabase architecture uses modern PostgreSQL with type-safe ORM:\n- **Database**: PostgreSQL for reliable relational data storage\n- **ORM**: Drizzle ORM for type-safe database operations and migrations\n- **Connection**: Serverless-compatible connection pooling with WebSocket support\n- **Schema**: Strongly typed schema definitions with Zod integration for validation\n- **Migrations**: Version-controlled database migrations in dedicated migrations folder\n\n## Design System\nThe application implements a professional dark-themed design system:\n- **Theme**: Professional dark mode with configurable color scheme\n- **Typography**: Modern font stack with responsive sizing\n- **Components**: Reusable component library with consistent styling patterns\n- **Responsive**: Mobile-first responsive design with Tailwind breakpoints\n- **Accessibility**: WCAG-compliant components with proper ARIA attributes\n\n## Core Features\n- **ROI Calculator**: Interactive tool for calculating automation return on investment\n- **Lead Generation**: Multi-step form for capturing qualified prospects\n- **Service Presentation**: Animated sections showcasing automation services\n- **Interactive Elements**: FAQ accordions, service carousels, and animated CTAs\n\n# External Dependencies\n\n## Database Infrastructure\n- **PostgreSQL**: Primary database with environment-based connection via DATABASE_URL\n- **Neon/Supabase Compatible**: Serverless PostgreSQL hosting support\n\n## Third-Party Integrations\n- **Voiceflow Chatbot**: Embedded customer support chatbot with project ID configuration\n- **Calendly**: Appointment scheduling integration for lead conversion\n- **Particles.js**: Background particle animations for visual enhancement\n\n## Development Tools\n- **TSParticles**: Lightweight particle system for background animations\n- **Lucide React**: Consistent icon library for UI elements\n- **Date-fns**: Date manipulation and formatting utilities\n- **Class Variance Authority**: Type-safe CSS class composition\n\n## Build and Deployment\n- **Vite**: Frontend build tool with React plugin and theme support\n- **ESBuild**: Backend bundling for production deployment\n- **PostCSS**: CSS processing with Tailwind and Autoprefixer\n- **TypeScript**: Full-stack type safety with path mapping and strict configuration\n\n## UI and Animation Libraries\n- **Radix UI**: Unstyled, accessible component primitives\n- **Tailwind CSS**: Utility-first CSS framework with custom configuration\n- **Framer Motion**: Production-ready motion library for React\n- **Embla Carousel**: Touch-friendly carousel component for service showcases","size_bytes":4176},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport themePlugin from \"@replit/vite-plugin-shadcn-theme-json\";\nimport path, { dirname } from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\nimport { fileURLToPath } from \"url\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nexport default defineConfig({\n  plugins: [react(), runtimeErrorOverlay(), themePlugin()],\n  resolve: {\n    alias: {\n      \"@db\": path.resolve(__dirname, \"db\"),\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});\n","size_bytes":748},"attached_assets/about-section-final.md":{"content":"# À propos\n\n## Mon parcours\n\nIngénieur informatique diplômé d'un Master 2 en Management et Conseils en SI, j'ai développé mon expertise en automatisation et en intelligence artificielle au sein de grands groupes avant de me spécialiser dans la création de solutions innovantes et personnalisées.\n\nMon parcours a débuté par une formation en alternance, me permettant d'acquérir simultanément des bases théoriques solides et une expérience pratique chez Société Générale (développement Qlikview) puis chez LVMH (gestion de projets techniques).\n\nPendant six années chez LVMH, j'ai évolué jusqu'au poste de responsable des outils pour le contrôle de gestion, gérant huit applications critiques pour la holding et la présidence du groupe. Cette expérience m'a permis de maîtriser les enjeux financiers et stratégiques des grandes entreprises, tout en découvrant les possibilités offertes par la RPA (Robotic Process Automation).\n\nMon passage comme consultant senior Data chez MeltOne a renforcé mon expertise en business intelligence, notamment sur Power BI, tandis que je me formais en parallèle aux technologies d'intelligence artificielle et d'automatisation avancée.\n\n## Mon expertise\n\nJe me spécialise aujourd'hui dans deux domaines complémentaires à fort potentiel :\n\n### Développement de chatbots avancés\nCréation de solutions conversationnelles intelligentes pour :\n- FAQ dynamiques\n- Support client personnalisé\n- Qualification de prospects\n- Assistance virtuelle\n\n### Automatisations augmentées par l'IA\nConception et déploiement de systèmes qui simplifient et optimisent :\n- La gestion documentaire\n- Les processus administratifs\n- La communication client\n- La génération de contenu\n\nEn veille technologique permanente, je développe également des solutions basées sur des systèmes multi-agents (frameworks comme smolagent, llamaindex, crewai, agency swarm) pour créer des agents IA verticaux adaptés à des secteurs spécifiques.\n\n## Réalisations concrètes\n\nMes projets témoignent de ma capacité à transformer des concepts innovants en solutions opérationnelles à valeur ajoutée :\n\n- **Assistant IA personnel** : Interface Telegram capable de gérer emails, événements, réunions et base de données clients par texte ou commande vocale\n- **Générateur SEO avancé** : Outil de création d'articles de niveau universitaire avec données en temps réel (alternative économique au DeepSearch d'OpenAI)\n- **Synchronisation Notion-Chatbot** : Système permettant aux équipes métier de mettre à jour la base de connaissances de leur chatbot sans compétences techniques\n- **Générateur de menus personnalisés** : Solution automatisée pour une nutritionniste intégrant les particularités de chaque client\n- **Générateur de présentations** : Création automatique de slides Google pour propositions commerciales personnalisées\n- **Système de templating CV** : Automatisation de mise en forme selon les standards d'entreprise\n- **Recommandeur d'automatisations** : Analyse de profils clients pour suggérer des solutions d'automatisation adaptées\n\n## Ma philosophie\n\nMa démarche repose sur quelques principes fondamentaux :\n\n- **Agilité et rapidité** : Cycles de développement courts avec mise en production rapide et itérations successives\n- **Transparence absolue** : Clarté des offres et des paiements, sans facturation cachée\n- **Engagement de résultat** : Garantie 30 jours satisfait ou remboursé sur l'ensemble de mes services\n- **Partenariat durable** : Vision à long terme de la relation client, au-delà de la simple prestation\n- **Transmission de compétences** : Formation des équipes aux outils déployés et accompagnement dans l'adoption des bonnes pratiques IA\n\n## Ma vision\n\nJe suis convaincu que les automatisations boostées à l'IA représentent le prochain levier de transformation majeur pour les entreprises. En libérant vos collaborateurs des tâches administratives récurrentes, ces solutions leur permettent de se concentrer sur leur véritable valeur ajoutée : leur expertise métier, leur créativité et leur capacité d'innovation.\n\nL'adoption de ces technologies ne représente pas seulement un gain de productivité, mais une véritable transformation de votre modèle opérationnel qui se traduira par une amélioration significative de votre performance commerciale et financière.\n\n## Pourquoi me faire confiance\n\n- **Expertise technique éprouvée** : Maîtrise des technologies de pointe en IA et automatisation\n- **Expérience de grands groupes** : Compréhension des enjeux organisationnels complexes\n- **Approche pragmatique** : Focus sur le ROI et les résultats concrets\n- **Engagement qualité** : Satisfaction client garantie\n- **Vision stratégique** : Capacité à aligner technologie et objectifs business\n\n## Discutons de votre projet\n\nVous avez des processus chronophages qui pourraient être automatisés ? Vous cherchez à améliorer votre relation client grâce à l'IA conversationnelle ? Contactez-moi pour un premier échange sans engagement.\n\n[Bouton Contact]\n","size_bytes":5105},"db/index.ts":{"content":"import { drizzle } from \"drizzle-orm/neon-serverless\";\nimport ws from \"ws\";\nimport * as schema from \"@db/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const db = drizzle({\n  connection: process.env.DATABASE_URL,\n  schema,\n  ws: ws,\n});\n","size_bytes":340},"db/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema, createSelectSchema } from \"drizzle-zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").unique().notNull(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users);\nexport const selectUserSchema = createSelectSchema(users);\nexport type InsertUser = typeof users.$inferInsert;\nexport type SelectUser = typeof users.$inferSelect;\n","size_bytes":539},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client\n  const PORT = 5000;\n  server.listen(PORT, \"0.0.0.0\", () => {\n    log(`serving on port ${PORT}`);\n  });\n})();\n","size_bytes":1823},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\n\nexport function registerRoutes(app: Express): Server {\n  // Route de debug pour tester les webhooks\n  app.get('/api/webhook-test', (req, res) => {\n    console.log('Requête webhook-test reçue:');\n    console.log('Query params:', req.query);\n    console.log('Headers:', req.headers);\n    \n    // Renvoyer tous les paramètres reçus\n    res.json({\n      success: true,\n      message: 'Webhook test réussi',\n      receivedParams: req.query,\n      headers: req.headers\n    });\n  });\n\n  // Route de debug pour voir les variables d'environnement\n  app.get('/api/env-check', (req, res) => {\n    console.log('Vérification des variables d\\'environnement');\n    \n    // Ne pas exposer les valeurs réelles en production, juste les noms des variables\n    const envVars = Object.keys(process.env)\n      .filter(key => key.startsWith('VITE_'))\n      .reduce((obj, key) => {\n        obj[key] = process.env[key] ? 'défini' : 'non défini';\n        return obj;\n      }, {});\n    \n    res.json({\n      environment: process.env.NODE_ENV || 'development',\n      envVars\n    });\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":1226},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path, { dirname } from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: {\n      middlewareMode: true,\n      hmr: { server },\n    },\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        __dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(`src=\"/src/main.tsx\"`, `src=\"/src/main.tsx?v=${nanoid()}\"`)\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(__dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2290},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { usePersistentToast } from \"@/hooks/use-persistent-toast\";\nimport { AnimatePresence } from \"framer-motion\";\nimport Home from \"@/pages/Home\";\nimport GapForm from \"@/pages/GapForm\";\nimport About from \"@/pages/About\";\nimport Roi from \"@/pages/Roi\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <AnimatePresence mode=\"wait\">\n      <Switch>\n        <Route path=\"/\" component={Home} />\n        <Route path=\"/gap\" component={GapForm} />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/roi\" component={Roi} />\n        <Route component={NotFound} />\n      </Switch>\n    </AnimatePresence>\n  );\n}\n\nfunction App() {\n  // Utiliser le hook pour vérifier s'il y a un toast en attente\n  usePersistentToast();\n  \n  return (\n    <QueryClientProvider client={queryClient}>\n      <Router />\n      <Toaster />\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":1111},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 84% 4.9%;\n\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 84% 4.9%;\n\n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 84% 4.9%;\n\n    --primary: 222.2 47.4% 11.2%;\n    --primary-foreground: 210 40% 98%;\n\n    --secondary: 210 40% 96.1%;\n    --secondary-foreground: 222.2 47.4% 11.2%;\n\n    --muted: 210 40% 96.1%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n\n    --accent: 210 40% 96.1%;\n    --accent-foreground: 222.2 47.4% 11.2%;\n\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 210 40% 98%;\n\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    --ring: 222.2 84% 4.9%;\n\n    --radius: 0.5rem;\n  }\n\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n\n    --primary: 210 40% 98%;\n    --primary-foreground: 222.2 47.4% 11.2%;\n\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n\n    --accent: 217.2 32.6% 17.5%;\n    --accent-foreground: 210 40% 98%;\n\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 212.7 26.8% 83.9%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n\n/* Backgrounds patterns */\n.bg-pattern {\n  background-image: url(\"data:image/svg+xml,%3Csvg width='30' height='30' viewBox='0 0 30 30' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M15 0C6.716 0 0 6.716 0 15c0 8.284 6.716 15 15 15 8.284 0 15-6.716 15-15 0-8.284-6.716-15-15-15zm0 26c-6.065 0-11-4.935-11-11s4.935-11 11-11 11 4.935 11 11-4.935 11-11 11z' fill='%239C92AC' fill-opacity='0.05' fill-rule='nonzero'/%3E%3C/svg%3E\");\n}\n\n.bg-dots-pattern {\n  background-image: url(\"data:image/svg+xml,%3Csvg width='30' height='30' viewBox='0 0 30 30' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M1.22676 0C1.91374 0 2.45351 0.539773 2.45351 1.22676C2.45351 1.91374 1.91374 2.45351 1.22676 2.45351C0.539773 2.45351 0 1.91374 0 1.22676C0 0.539773 0.539773 0 1.22676 0Z' fill='rgba(50,100,150,0.07)'%3E%3C/path%3E%3C/svg%3E\");\n}\n\n/* Rainbow Text Effect */\n.rainbow-text {\n  @apply bg-clip-text text-transparent;\n  background-image: linear-gradient(\n    to right,\n    #ff0000, /* Rouge */\n    #ff8000, /* Orange */\n    #ffff00, /* Jaune */\n    #80ff00, /* Jaune-vert */\n    #00ff00, /* Vert */\n    #00ff80, /* Vert-cyan */\n    #00ffff, /* Cyan */\n    #0080ff, /* Bleu clair */\n    #0000ff, /* Bleu */\n    #8000ff, /* Indigo */\n    #ff00ff, /* Magenta */\n    #ff0080, /* Rose */\n    #ff0000  /* Rouge (retour au début) */\n  );\n  background-size: 400% auto;\n  animation: rainbow-text-animation 8s linear infinite;\n}\n\n@keyframes rainbow-text-animation {\n  0% {\n    background-position: 0% center;\n  }\n  100% {\n    background-position: 400% center;\n  }\n}\n\n/* Page transitions */\n.page-transition-enter {\n  opacity: 0;\n  transform: translateY(20px);\n}\n\n.page-transition-enter-active {\n  opacity: 1;\n  transform: translateY(0);\n  transition: opacity 400ms, transform 400ms;\n}\n\n.page-transition-exit {\n  opacity: 1;\n  transform: translateY(0);\n}\n\n.page-transition-exit-active {\n  opacity: 0;\n  transform: translateY(-20px);\n  transition: opacity 300ms, transform 300ms;\n}","size_bytes":3550},"client/src/main.tsx":{"content":"import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from './App';\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(\n  <StrictMode>\n    <App/>\n  </StrictMode>,\n);","size_bytes":229},"client/src/components/AutomationExamplesSection.tsx":{"content":"import { motion, AnimatePresence } from \"framer-motion\";\nimport { useState, useEffect } from \"react\";\nimport { Card } from \"./ui/card\";\nimport { \n  Users, \n  FileText, \n  Mail, \n  FileCheck, \n  FolderGit2,\n  MessageCircle,\n  TrendingUp,\n  ChevronLeft,\n  ChevronRight,\n  Video\n} from \"lucide-react\";\n\nconst examples = [\n  {\n    id: 1,\n    title: \"🤖 Chatbot FAQ & Support Client Automatisé\",\n    subtitle: \"Assistance instantanée 24/7 pour une expérience client fluide\",\n    features: [\n      \"Réponses automatisées aux questions fréquentes grâce à l'IA\",\n      \"Intégration multi-canaux (site web, Messenger, WhatsApp)\",\n      \"Escalade intelligente vers un conseiller pour les cas complexes\"\n    ],\n    quote: \"Le compagnon digital qui répond à vos clients, même quand vous dormez.\",\n    gain: \"Réduisez vos coûts de support de 60% en 3 mois\",\n    icon: MessageCircle\n  },\n  {\n    id: 2,\n    title: \"🧠 Votre propre assistant personnel\",\n    subtitle: \"Un collaborateur virtuel disponible 24/7\",\n    features: [\n      \"Envoi et gestion automatisés de vos emails professionnels\",\n      \"Organisation et planification intelligente de vos réunions\",\n      \"Multitâche avancé pour libérer votre temps et votre esprit\"\n    ],\n    quote: \"L'assistant qui ne prend jamais de congés et s'adapte parfaitement à vos besoins.\",\n    gain: \"Récupérez 15h de productivité par semaine dès le premier mois\",\n    icon: Mail\n  },\n  {\n    id: 3,\n    title: \"🎯 Onboarding client automatisé\",\n    subtitle: \"Pour freelances/agences qui scalent\",\n    features: [\n      \"Dossier Google Drive/Notion généré automatiquement\",\n      \"Checklist tâches (Asana, ClickUp, Trello)\",\n      \"Email de bienvenue avec accès client\"\n    ],\n    quote: \"L'organisation d'une entreprise structurée… sans embaucher un assistant.\",\n    gain: \"Diminuez de 80% le temps d'intégration client en 2 semaines\",\n    icon: FolderGit2\n  },\n  {\n    id: 4,\n    title: \"⚡ Devis pros en 2 minutes chrono\",\n    subtitle: \"Pour commerciaux qui détestent l'admin\",\n    features: [\n      \"Conversion automatique réunion → PDF professionnel\",\n      \"Intégration logo/normes de votre entreprise\",\n      \"Envoi tracker avec signature électronique\"\n    ],\n    quote: \"Vos propositions commerciales passent du 'brouillon' à 'signé' en un clic.\",\n    gain: \"Automatisez la phase de rédaction de devis et de contrats et gagnez jusqu'à 2 heures d'admin par client\",\n    icon: FileCheck\n  },\n  {\n    id: 5,\n    title: \"📄 Génération de documents templatés\",\n    subtitle: \"Automatisation intelligente de vos documents\",\n    features: [\n      \"Création de documents à partir de formulaires ou conversations chatbot\",\n      \"Transformation automatique de CV au format de votre entreprise\",\n      \"Templates personnalisables pour tout type de document professionnel\"\n    ],\n    quote: \"Votre usine à documents professionnels qui fonctionne pendant que vous vous concentrez sur l'essentiel.\",\n    gain: \"Économisez 90% du temps de production documentaire en 1 mois\",\n    icon: FileText\n  },\n  {\n    id: 6,\n    title: \"🎥 Générateur de contenu 2.0\",\n    subtitle: \"Pour agences marketing et créateurs pressés\",\n    features: [\n      \"Scan automatique des tendances YouTube/Instagram\",\n      \"Réécriture sur-mesure (ton, longueur, mots-clés)\",\n      \"Programmation sur tous vos canaux en 1 clic\"\n    ],\n    quote: \"Votre usine à contenu personnalisé, même sans rédacteur.\",\n    gain: \"Produisez 5x plus de contenu avec le même budget en 30 jours\",\n    icon: Video\n  }\n];\n\nexport const AutomationExamplesSection = () => {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [timeLeft, setTimeLeft] = useState(10);\n  const [touchStart, setTouchStart] = useState(0);\n  const [touchEnd, setTouchEnd] = useState(0);\n  const [isMobile, setIsMobile] = useState(false);\n  \n  // Check if device is mobile\n  useEffect(() => {\n    const checkMobile = () => {\n      setIsMobile(window.innerWidth < 768);\n    };\n    \n    checkMobile();\n    window.addEventListener('resize', checkMobile);\n    \n    return () => window.removeEventListener('resize', checkMobile);\n  }, []);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setTimeLeft((prev) => {\n        if (prev <= 0) {\n          setCurrentIndex((prevIndex) => {\n            if (isMobile) {\n              return (prevIndex + 1) % examples.length;\n            }\n            return (prevIndex + 2) % examples.length;\n          });\n          return 5; // Accélérer la rotation des exemples (5 secondes au lieu de 10)\n        }\n        return prev - 1;\n      });\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, [isMobile]);\n\n  // Calculate examples to display based on device\n  const currentExamples = isMobile\n    ? [examples[currentIndex]]\n    : [\n        examples[currentIndex],\n        examples[(currentIndex + 1) % examples.length]\n      ];\n\n  const handlePrevious = () => {\n    if (isMobile) {\n      setCurrentIndex((prevIndex) => \n        prevIndex === 0 ? examples.length - 1 : prevIndex - 1\n      );\n    } else {\n      setCurrentIndex((prevIndex) => \n        prevIndex === 0 ? examples.length - 2 : (prevIndex - 2 + examples.length) % examples.length\n      );\n    }\n    setTimeLeft(10);\n  };\n\n  const handleNext = () => {\n    if (isMobile) {\n      setCurrentIndex((prevIndex) => (prevIndex + 1) % examples.length);\n    } else {\n      setCurrentIndex((prevIndex) => (prevIndex + 2) % examples.length);\n    }\n    setTimeLeft(10);\n  };\n\n  // Handle touch events for swipe\n  const handleTouchStart = (e: React.TouchEvent) => {\n    setTouchStart(e.targetTouches[0].clientX);\n  };\n  \n  const handleTouchMove = (e: React.TouchEvent) => {\n    setTouchEnd(e.targetTouches[0].clientX);\n  };\n  \n  const handleTouchEnd = () => {\n    if (touchStart - touchEnd > 100) {\n      // Swipe left\n      handleNext();\n    }\n    \n    if (touchEnd - touchStart > 100) {\n      // Swipe right\n      handlePrevious();\n    }\n  };\n\n  return (\n    <section id=\"examples\" className=\"py-16 bg-gray-900\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"mb-12\">\n          <h2 className=\"section-title text-center text-3xl font-bold text-white mb-4\">\n            Exemples d'Automatisations\n          </h2>\n          <p className=\"text-gray-400 text-center max-w-2xl mx-auto\">\n            Découvrez comment nos solutions peuvent transformer votre quotidien professionnel\n          </p>\n        </div>\n        \n        <div className=\"flex justify-center items-center mb-4\">\n          <span className=\"md:hidden text-xs text-gray-400 mr-2\">\n            ← glisser →\n          </span>\n          <div className=\"flex items-center space-x-3\">\n            {examples.map((_, idx) => (\n              <div\n                key={idx}\n                className={`w-2 h-2 rounded-full transition-all duration-300 cursor-pointer ${\n                  isMobile \n                    ? (currentIndex === idx ? 'bg-orange-500 scale-125' : 'bg-gray-600')\n                    : (idx % 2 === 0 && currentIndex === idx ? 'bg-orange-500 scale-125' : 'bg-gray-600')\n                }`}\n                onClick={() => {\n                  if (isMobile) {\n                    setCurrentIndex(idx);\n                  } else if (idx % 2 === 0) {\n                    setCurrentIndex(idx);\n                  }\n                  setTimeLeft(10);\n                }}\n              />\n            ))}\n          </div>\n        </div>\n\n        <div className=\"relative\"\n           onTouchStart={handleTouchStart}\n           onTouchMove={handleTouchMove}\n           onTouchEnd={handleTouchEnd}>\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 relative\">\n            <AnimatePresence mode=\"wait\">\n              {currentExamples.map((example, index) => (\n                <motion.div\n                  key={example.id}\n                  initial={{ opacity: 0, x: 100 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  exit={{ opacity: 0, x: -100 }}\n                  transition={{ duration: 0.5, delay: index * 0.2 }}\n                  whileHover={{ \n                    scale: 1.02,\n                    transition: { duration: 0.2 }\n                  }}\n                >\n                  <Card className=\"p-6 h-full bg-gray-800/50 border-gray-700 hover:bg-gray-800 transition-colors duration-200\">\n                    <div className=\"flex items-start gap-4 mb-4\">\n                      <div className=\"rounded-full bg-gray-700 p-3 flex-shrink-0\">\n                        <example.icon className=\"w-6 h-6 text-orange-500\" />\n                      </div>\n                      <div>\n                        <h3 className=\"text-xl font-bold text-white mb-1\">{example.title}</h3>\n                        <p className=\"text-gray-400 text-sm\">{example.subtitle}</p>\n                      </div>\n                    </div>\n\n                    {example.gain && (\n                      <div className=\"flex items-center gap-2 mb-4 p-2 bg-gray-700/50 rounded-md border border-gray-700\">\n                        <TrendingUp className=\"w-5 h-5 text-green-500 flex-shrink-0\" />\n                        <p className=\"text-green-400 font-medium text-sm\">{example.gain}</p>\n                      </div>\n                    )}\n\n                    <ul className=\"space-y-2 mb-4\">\n                      {example.features.map((feature, index) => (\n                        <li key={index} className=\"text-gray-300 flex items-center gap-2\">\n                          <span className=\"text-orange-500\">•</span>\n                          {feature}\n                        </li>\n                      ))}\n                    </ul>\n                    <p className=\"text-gray-400 italic border-l-2 border-orange-500 pl-4\">\n                      {example.quote}\n                    </p>\n                  </Card>\n                </motion.div>\n              ))}\n            </AnimatePresence>\n          </div>\n\n          {/* Navigation arrows - hidden on mobile */}\n          <button \n            onClick={handlePrevious}\n            className=\"absolute left-0 top-1/2 transform -translate-y-1/2 -translate-x-8 lg:-translate-x-12 bg-gray-800/80 hover:bg-gray-700 text-white p-2 rounded-full z-10 hidden md:block\"\n            aria-label=\"Exemple précédent\"\n          >\n            <ChevronLeft className=\"w-6 h-6\" />\n          </button>\n\n          <button \n            onClick={handleNext}\n            className=\"absolute right-0 top-1/2 transform -translate-y-1/2 translate-x-8 lg:translate-x-12 bg-gray-800/80 hover:bg-gray-700 text-white p-2 rounded-full z-10 hidden md:block\"\n            aria-label=\"Exemple suivant\"\n          >\n            <ChevronRight className=\"w-6 h-6\" />\n          </button>\n        </div>\n      </div>\n    </section>\n  );\n};","size_bytes":10803},"client/src/components/FaqSection.tsx":{"content":"import {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"./ui/accordion\";\n\nconst faqs = [\n  {\n    question: \"J'ai zéro compétence en tech, est-ce que je vais comprendre comment utiliser vos solutions ?\",\n    answer: \"Absolument ! Nos outils sont conçus pour être intuitifs et faciles à utiliser. Nous vous accompagnons pas à pas dans la prise en main et restons disponibles pour répondre à vos questions.\"\n  },\n  {\n    question: \"Combien de temps faut-il pour mettre en place une automatisation ?\",\n    answer: \"La durée dépend de la complexité de vos besoins. En général, nos solutions sont opérationnelles en 2 à 4 semaines, incluant les phases de test et d'ajustement.\"\n  },\n  {\n    question: \"Est-ce que je peux personnaliser les automatisations selon mes besoins ?\",\n    answer: \"Oui, toutes nos solutions sont développées sur mesure pour s'adapter parfaitement à vos processus existants et à vos objectifs spécifiques.\"\n  },\n  {\n    question: \"Quel retour sur investissement puis-je espérer ?\",\n    answer: \"Nos clients constatent en moyenne une réduction de 70% du temps passé sur les tâches automatisées, permettant de se concentrer sur les activités à plus forte valeur ajoutée.\"\n  },\n  {\n    question: \"Comment assurez-vous la sécurité des données ?\",\n    answer: \"Nous utilisons des technologies de pointe et respectons les normes de sécurité les plus strictes pour protéger vos données. Tous nos systèmes sont conformes au RGPD.\"\n  },\n  {\n    question: \"Que se passe-t-il si j'ai besoin de support ?\",\n    answer: \"Notre équipe support est disponible en continu pour vous accompagner. Nous garantissons un temps de réponse sous 24h pour toute demande d'assistance.\"\n  }\n];\n\nexport default function FaqSection() {\n  return (\n    <section id=\"faq\" className=\"py-16\">\n      <div className=\"container mx-auto px-4\">\n        <h2 className=\"section-title text-center mb-12 text-3xl font-bold text-gray-100\">Questions Fréquentes</h2>\n        <div className=\"max-w-3xl mx-auto\">\n          <Accordion type=\"single\" collapsible className=\"w-full\">\n            {faqs.map((faq, index) => (\n              <AccordionItem key={index} value={`item-${index}`} className=\"border-gray-700\">\n                <AccordionTrigger className=\"text-left text-gray-100\">\n                  {faq.question}\n                </AccordionTrigger>\n                <AccordionContent className=\"text-gray-300\">\n                  {faq.answer}\n                </AccordionContent>\n              </AccordionItem>\n            ))}\n          </Accordion>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":2640},"client/src/components/Footer.tsx":{"content":"\nexport default function Footer() {\n  return (\n    <footer className=\"bg-gray-900\" style={{ backgroundColor: '#0f172a' }}>\n      <div className=\"container py-12 mx-auto px-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4 text-gray-100\">Sablia</h3>\n            <p className=\"text-gray-300\">\n              Solutions d'automatisation intelligentes pour votre entreprise\n            </p>\n          </div>\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4 text-gray-100\">Contact</h3>\n            <a\n              href=\"mailto:brice@sablia.io\"\n              className=\"text-gray-300 hover:text-white block\"\n            >\n              brice@sablia.io\n            </a>\n          </div>\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4 text-gray-100\">Légal</h3>\n            <a href=\"#\" className=\"text-gray-300 hover:text-white block mb-2\">\n              Mentions légales\n            </a>\n            <a href=\"#\" className=\"text-gray-300 hover:text-white block mb-2\">\n              Politique de confidentialité\n            </a>\n            <a href=\"#\" className=\"text-gray-300 hover:text-white block\">\n              CGV\n            </a>\n          </div>\n        </div>\n        <div className=\"border-t border-gray-700 mt-8 pt-8 text-center text-gray-300\">\n          <p>&copy; {new Date().getFullYear()} Sablia. Tous droits réservés.</p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":1513},"client/src/components/HeroSection.tsx":{"content":"import { Button } from \"./ui/button\";\nimport { RainbowText } from \"./RainbowText\";\nimport { Link } from \"wouter\";\n\nexport default function HeroSection() {\n  return (\n    <div className=\"h-screen flex items-center justify-center bg-gray-900 text-gray-100 relative overflow-hidden\">\n      <div className=\"container mx-auto px-4 py-16 w-full flex flex-col justify-center h-full\">\n        <div className=\"max-w-3xl mx-auto text-center w-full mt-16\">\n          <p className=\"text-sm font-semibold tracking-widest text-gray-400 uppercase mb-10\">\n            AUTOMATE YOUR BUSINESS\n          </p>\n          <h1 className=\"text-3xl sm:text-5xl md:text-6xl font-bold text-white mb-16 leading-tight max-w-full overflow-hidden\">\n            Laissez l'<span className=\"rainbow-text\">IA</span> & vos<br className=\"hidden sm:block\" /> <span className=\"rainbow-text\">automatisations</span><br /> booster votre Business.\n          </h1>\n          <p className=\"text-base sm:text-lg md:text-2xl text-gray-300 mb-20 max-w-full px-4\">\n            Libérez votre temps des tâches répétitives. \n          </p>\n          <div className=\"flex gap-6 justify-center flex-wrap px-4 mt-8\">\n            <a\n              href=\"https://calendly.com/brice-gachadoat/30min\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"w-full sm:w-auto bg-gradient-to-r from-orange-500 to-orange-600 hover:from-orange-600 hover:to-orange-700 text-white px-6 sm:px-10 py-4 rounded-md inline-block shadow-lg hover:shadow-xl transition-all duration-300 text-sm sm:text-base font-medium\"\n            >\n              Réservez un call gratuit !\n            </a>\n            <Link href=\"/gap\" className=\"w-full sm:w-auto bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white px-4 sm:px-8 py-3 rounded-md inline-block shadow-lg hover:shadow-xl transition-all duration-300 text-sm sm:text-base font-medium truncate\">\n              Découvrez vos automatisations sur-mesure !\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":2091},"client/src/components/Navbar.tsx":{"content":"import { useState } from \"react\";\nimport { Menu, X } from \"lucide-react\";\nimport { Button } from \"./ui/button\";\n\nexport default function Navbar() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const menuItems = [\n    { label: \"Accueil\", href: \"/\" },\n    { label: \"ROI Calculator\", href: \"/roi\" },\n    { label: \"GAP\", href: \"/gap\" },\n    { label: \"À propos\", href: \"/about\" },\n  ];\n\n  const handleNavigation = (e: React.MouseEvent<HTMLAnchorElement>, href: string) => {\n    // Si c'est un lien d'ancrage et nous sommes sur une page autre que l'accueil\n    if (href.startsWith('#') && window.location.pathname !== '/') {\n      e.preventDefault();\n      window.location.href = '/' + href;\n    }\n  };\n\n  return (\n    <nav className=\"bg-gray-900/80 backdrop-blur-sm fixed w-full z-50 top-0 left-0 border-b border-gray-800\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"flex items-center justify-between h-16\">\n          <div className=\"flex items-center space-x-2\">\n            <a href=\"/\" className=\"flex items-center space-x-2 hover:opacity-80 transition-opacity\">\n              <img src=\"/logo.svg\" alt=\"Sablia\" className=\"h-8 w-8\" />\n              <span className=\"text-xl font-semibold text-gray-100\">Sablia</span>\n            </a>\n          </div>\n\n          {/* Desktop menu */}\n          <div className=\"hidden md:block\">\n            <div className=\"ml-10 flex items-center space-x-8\">\n              {menuItems.map((item) => (\n                <a\n                  key={item.label}\n                  href={item.href}\n                  className=\"text-gray-300 hover:text-white px-3 py-2 text-sm font-medium\"\n                  onClick={(e) => handleNavigation(e, item.href)}\n                >\n                  {item.label}\n                </a>\n              ))}\n            </div>\n          </div>\n\n          {/* Mobile menu button */}\n          <div className=\"md:hidden\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => setIsOpen(!isOpen)}\n              aria-label=\"Menu\"\n              className=\"text-gray-300 hover:text-white\"\n            >\n              {isOpen ? <X className=\"h-6 w-6\" /> : <Menu className=\"h-6 w-6\" />}\n            </Button>\n          </div>\n        </div>\n\n        {/* Mobile menu */}\n        {isOpen && (\n          <div className=\"md:hidden\">\n            <div className=\"px-2 pt-2 pb-3 space-y-1 bg-gray-900\">\n              {menuItems.map((item) => (\n                <a\n                  key={item.label}\n                  href={item.href}\n                  className=\"text-gray-300 hover:text-white block px-3 py-2 text-base font-medium\"\n                  onClick={(e) => {\n                    setIsOpen(false);\n                    handleNavigation(e, item.href);\n                  }}\n                >\n                  {item.label}\n                </a>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    </nav>\n  );\n}\n\n\n// New About page component\nfunction About() {\n  const aboutText = `[Insert the text provided by the user here]`; //Replace with actual text\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <h1 className=\"text-3xl font-bold mb-4\">À propos</h1>\n      <p>{aboutText}</p>\n    </div>\n  );\n}\n\nexport {About};","size_bytes":3293},"client/src/components/ParticlesBackground.tsx":{"content":"import { useCallback } from \"react\";\nimport Particles from \"react-tsparticles\";\nimport { loadSlim } from \"tsparticles-slim\";\nimport type { Engine } from \"tsparticles-engine\";\n\nexport default function ParticlesBackground() {\n  const particlesInit = useCallback(async (engine: Engine) => {\n    await loadSlim(engine);\n  }, []);\n\n  return (\n    <Particles\n      id=\"tsparticles\"\n      init={particlesInit}\n      options={{\n        background: {\n          color: {\n            value: \"transparent\",\n          },\n        },\n        fullScreen: false,\n        fpsLimit: 120,\n        particles: {\n          color: {\n            value: \"#4f46e5\",\n          },\n          links: { \n            enable: false \n          },\n          move: {\n            enable: true,\n            speed: 0.8,\n            direction: \"none\",\n            random: false,\n            straight: false,\n            outModes: {\n              default: \"out\",\n            },\n            trail: {\n              enable: true,\n              length: 20,\n              fill: {\n                color: \"#4f46e5\",\n              },\n            },\n          },\n          number: {\n            density: { \n              enable: true, \n              area: 1200 \n            },\n            value: 20,\n          },\n          opacity: {\n            value: 0.15,\n            animation: {\n              enable: true,\n              speed: 0.2,\n              minimumValue: 0.05,\n              sync: false,\n            },\n          },\n          size: {\n            value: { min: 0.5, max: 1.5 },\n            animation: {\n              enable: true,\n              speed: 0.8,\n              minimumValue: 0.3,\n              sync: false,\n            },\n          },\n          shape: { \n            type: \"circle\" \n          },\n          life: {\n            duration: {\n              sync: false,\n              value: 4\n            },\n            count: 1,\n          }\n        },\n        detectRetina: true,\n      }}\n      style={{\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        zIndex: 0,\n        pointerEvents: 'none',\n      }}\n    />\n  );\n}","size_bytes":2148},"client/src/components/ProcessSection.tsx":{"content":"\nimport { Clock, Wrench, CheckCircle, Rocket } from \"lucide-react\";\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"./ui/accordion\";\n\nconst steps = [\n  {\n    icon: Clock,\n    title: \"Appel découverte gratuit\",\n    subtitle: \"On discute, on identifie, on vous propose – sans aucun engagement !\",\n    content: `Ce premier contact est l'occasion d'échanger librement sur vos besoins, vos outils existants et les tâches qui vous prennent le plus de temps. Nous analysons ensemble vos processus pour cibler les automatisations les plus impactantes. À la fin de l'appel, vous recevrez un résumé personnalisé avec des pistes concrètes pour optimiser votre quotidien.\n\n    ✅ Ce que vous gagnez :\n    • Aucune pression : c'est une simple prise de contact\n    • Une analyse clé en main de vos points bloquants\n    • Des idées d'automatisation adaptées à vos besoins\n    \n    Vous repartez avec des solutions, même si nous ne travaillons pas ensemble !`\n  },\n  {\n    icon: Wrench,\n    title: \"Développement sur mesure\",\n    subtitle: \"Une solution 100% façonnée pour vous, sans délai standardisé\",\n    content: `Nous transformons vos idées en outils concrets. Que votre besoin soit simple (automatiser un envoi d'emails) ou complexe (refonte d'un workflow multi-services), nous adaptons notre approche. La réalisation prend entre 3 jours et 4 semaines selon les cas – nous vous tiendrons informés à chaque étape !\n\n    ✅ Notre promesse :\n    • Pas de modèle prédéfini : tout est conçu pour votre activité\n    • Des mises à jour régulières sur l'avancée du projet\n    • Des technologies sécurisées et compatibles avec vos systèmes`\n  },\n  {\n    icon: CheckCircle,\n    title: \"Tests et ajustements\",\n    subtitle: \"Votre avis guide tout : on affine jusqu'à la perfection !\",\n    content: `Nous vous présentons la solution développée et testons ensemble son fonctionnement. Un bug ? Une fonction manquante ? Nous modifions, améliorons et réitérons les tests autant de fois que nécessaire. L'objectif est simple : vous offrir un outil qui dépasse vos attentes.\n\n    ✅ Pourquoi ça marche :\n    • Des retours intégrés en temps réel\n    • Des corrections rapides (souvent sous 24h)\n    • Une équipe disponible pour répondre à toutes vos questions`\n  },\n  {\n    icon: Rocket,\n    title: \"Intégration finale\",\n    subtitle: \"Vous pilotez, nous restons en copilote !\",\n    content: `Une fois la solution validée, nous la déployons sur vos plateformes en toute transparence. Vous recevez vos identifiants, une formation claire et un accès à notre FAQ en ligne. Et si besoin, notre équipe reste joignable pour des ajustements post-lancement.\n\n    ✅ Les avantages :\n    • Autonomie totale (mais pas d'abandon !)\n    • Documentation et tutoriels vidéo inclus\n    • Un support réactif pendant 1 mois offert\n    \n    Votre succès est le nôtre : nous célébrerons ensemble chaque gain de productivité !`\n  }\n];\n\nexport default function ProcessSection() {\n  return (\n    <section id=\"process\" className=\"py-16\">\n      <div className=\"container mx-auto px-4 max-w-4xl\">\n        <h2 className=\"section-title text-center mb-12 text-3xl font-bold text-white\">Notre Processus</h2>\n        <div className=\"relative\">\n          <div className=\"absolute left-8 top-0 h-full w-px bg-gradient-to-b from-orange-500/30 to-orange-600/30\" />\n          <Accordion type=\"single\" collapsible className=\"space-y-6\">\n            {steps.map((step, index) => (\n              <AccordionItem\n                key={index}\n                value={`step-${index}`}\n                className=\"border-none relative\"\n              >\n                <div className=\"absolute -left-3 top-4 h-4 w-4 rounded-full bg-orange-500\" />\n                <div className=\"pl-12\">\n                  <AccordionTrigger className=\"hover:no-underline [&[data-state=open]>div]:text-orange-500\">\n                    <div className=\"flex flex-col items-start text-left\">\n                      <h3 className=\"text-xl font-semibold mb-2 text-white\">\n                        {step.title}\n                      </h3>\n                      <p className=\"text-gray-400 text-sm\">{step.subtitle}</p>\n                    </div>\n                  </AccordionTrigger>\n                  <AccordionContent className=\"text-gray-300 whitespace-pre-line\">\n                    {step.content}\n                  </AccordionContent>\n                </div>\n              </AccordionItem>\n            ))}\n          </Accordion>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4613},"client/src/components/RainbowText.tsx":{"content":"\nimport React from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface RainbowTextProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport function RainbowText({ children, className }: RainbowTextProps) {\n  return (\n    <span className={cn(\"rainbow-text\", className)}>\n      {children}\n    </span>\n  );\n}\n","size_bytes":319},"client/src/components/RoiBanner.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Link } from \"wouter\";\nimport { ArrowRight } from \"lucide-react\";\n\n// SVG inline du tableau de bord\nconst DashboardSvg = () => (\n  <svg \n    className=\"w-full h-auto max-w-md drop-shadow-xl\" \n    viewBox=\"0 0 480 320\" \n    fill=\"none\" \n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    {/* Fond du dashboard */}\n    <rect width=\"480\" height=\"320\" rx=\"16\" fill=\"#1F2937\" />\n    \n    {/* Header */}\n    <rect x=\"20\" y=\"20\" width=\"440\" height=\"40\" rx=\"8\" fill=\"#374151\" />\n    <circle cx=\"40\" cy=\"40\" r=\"8\" fill=\"#10B981\" />\n    <rect x=\"60\" y=\"36\" width=\"120\" height=\"8\" rx=\"4\" fill=\"#6B7280\" />\n    <rect x=\"360\" y=\"36\" width=\"80\" height=\"8\" rx=\"4\" fill=\"#6B7280\" />\n    \n    {/* Graphique principal */}\n    <rect x=\"20\" y=\"80\" width=\"280\" height=\"160\" rx=\"8\" fill=\"#374151\" />\n    <polyline points=\"40,200 80,180 120,190 160,150 200,120 240,100 280,90\" stroke=\"#8B5CF6\" strokeWidth=\"3\" strokeLinecap=\"round\" />\n    <polyline points=\"40,200 80,160 120,170 160,140 200,130 240,120 280,110\" stroke=\"#10B981\" strokeWidth=\"3\" strokeLinecap=\"round\" />\n    \n    {/* Légendes */}\n    <rect x=\"40\" y=\"220\" width=\"40\" height=\"4\" rx=\"2\" fill=\"#8B5CF6\" />\n    <rect x=\"90\" y=\"220\" width=\"60\" height=\"4\" rx=\"2\" fill=\"#6B7280\" />\n    <rect x=\"160\" y=\"220\" width=\"40\" height=\"4\" rx=\"2\" fill=\"#10B981\" />\n    <rect x=\"210\" y=\"220\" width=\"60\" height=\"4\" rx=\"2\" fill=\"#6B7280\" />\n    \n    {/* Statistiques à droite */}\n    <rect x=\"320\" y=\"80\" width=\"140\" height=\"70\" rx=\"8\" fill=\"#374151\" />\n    <rect x=\"340\" y=\"100\" width=\"80\" height=\"8\" rx=\"4\" fill=\"#6B7280\" />\n    <rect x=\"340\" y=\"120\" width=\"100\" height=\"10\" rx=\"5\" fill=\"#10B981\" />\n    \n    <rect x=\"320\" y=\"170\" width=\"140\" height=\"70\" rx=\"8\" fill=\"#374151\" />\n    <rect x=\"340\" y=\"190\" width=\"80\" height=\"8\" rx=\"4\" fill=\"#6B7280\" />\n    <rect x=\"340\" y=\"210\" width=\"100\" height=\"10\" rx=\"5\" fill=\"#EC4899\" />\n  </svg>\n);\n\n// Badge \"Nouveau\"\nconst NewBadge = () => (\n  <div className=\"absolute -top-2 -right-2 bg-gradient-to-r from-pink-500 to-purple-600 text-white text-xs font-bold px-3 py-1 rounded-full shadow-lg animate-pulse\">\n    Nouveau !\n  </div>\n);\n\nexport default function RoiBanner() {\n  return (\n    <section id=\"roi-banner\" className=\"py-16 bg-gradient-to-r from-gray-100 to-gray-200 relative overflow-hidden\">\n      {/* Overlay léger violet */}\n      <div className=\"absolute inset-0 bg-gradient-to-br from-purple-500/10 to-blue-500/5\"></div>\n      \n      <div className=\"container mx-auto px-4 relative z-10\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-10 items-center\">\n          \n          {/* Colonne de texte */}\n          <div className=\"text-center md:text-left\">\n            <h2 className=\"text-3xl sm:text-4xl font-bold mb-6 text-gray-800\">\n              Calculez votre retour sur investissement en 60 secondes\n            </h2>\n            <p className=\"text-lg sm:text-xl text-gray-600 mb-8 leading-relaxed\">\n              Découvrez instantanément combien vos automatisations vont vous rapporter chaque mois et à quelle date vous atteignez le seuil de rentabilité.\n            </p>\n            \n            <div className=\"flex flex-col items-center md:items-start space-y-4\">\n              <Link href=\"/roi\">\n                <motion.button\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                  className=\"btn-primary bg-gradient-to-r from-purple-600 to-blue-600 text-white px-8 py-3 min-h-[44px] rounded-lg font-medium flex items-center justify-center gap-2 shadow-lg hover:shadow-xl transition-all duration-300\"\n                  aria-label=\"Calculer votre retour sur investissement\"\n                >\n                  Je calcule mon ROI <ArrowRight className=\"h-5 w-5\" />\n                </motion.button>\n              </Link>\n              <p className=\"text-sm text-gray-500\">Aucune donnée sensible requise – résultat immédiat</p>\n            </div>\n          </div>\n          \n          {/* Colonne avec tableau de bord */}\n          <div className=\"relative\">\n            <motion.div\n              whileHover={{ y: -5 }}\n              transition={{ duration: 0.3 }}\n              className=\"relative\"\n            >\n              <DashboardSvg />\n              <NewBadge />\n            </motion.div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n\n// Composant CTA pour le bas de page\nexport function RoiCta() {\n  return (\n    <section className=\"py-12 bg-gray-800 text-center\">\n      <div className=\"container mx-auto px-4\">\n        <h3 className=\"text-2xl sm:text-3xl font-semibold text-white mb-6\">\n          Prêt à calculer votre retour sur investissement ?\n        </h3>\n        <p className=\"text-gray-300 mb-8 max-w-2xl mx-auto\">\n          Utilisez notre calculateur intuitif et découvrez en quelques clics la rentabilité de vos projets d'automatisation.\n        </p>\n        <Link href=\"/roi\">\n          <motion.button\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n            className=\"btn-primary bg-gradient-to-r from-purple-600 to-blue-600 text-white px-8 py-3 min-h-[44px] rounded-lg font-medium flex items-center justify-center gap-2 shadow-lg hover:shadow-xl transition-all duration-300 mx-auto\"\n            aria-label=\"Calculer votre retour sur investissement\"\n          >\n            Je calcule mon ROI <ArrowRight className=\"h-5 w-5\" />\n          </motion.button>\n        </Link>\n      </div>\n    </section>\n  );\n}","size_bytes":5495},"client/src/components/RoiCalculator.tsx":{"content":"import React, { useState, useEffect, useCallback } from 'react';\nimport { motion } from 'framer-motion';\nimport { format } from 'date-fns';\nimport { fr } from 'date-fns/locale';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Slider } from '@/components/ui/slider';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { Label } from '@/components/ui/label';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\nimport { \n  Calculator, \n  Clock, \n  Calendar, \n  Users, \n  Euro, \n  TrendingUp, \n  Info,\n  Sparkles,\n  CalendarDays\n} from 'lucide-react';\nimport { \n  calculateRoi, \n  Frequency, \n  SalaryMode, \n  DEFAULT_MONTHLY_NET_SALARY,\n  DEV_DAYS\n} from '@/utils/roi';\n\n// Convertit les heures en format lisible (ex: 1.5h -> 1h 30min)\nconst formatHours = (hours: number) => {\n  const h = Math.floor(hours);\n  const m = Math.round((hours - h) * 60);\n  \n  if (h === 0) return `${m} min`;\n  if (m === 0) return `${h}h`;\n  return `${h}h ${m}min`;\n};\n\n// Formate les valeurs monétaires\nconst formatCurrency = (value: number) => {\n  return new Intl.NumberFormat('fr-FR', {\n    style: 'currency',\n    currency: 'EUR',\n    maximumFractionDigits: 0\n  }).format(value);\n};\n\n// Formate les valeurs monétaires avec 2 décimales max\nconst formatCurrencyWithDecimals = (value: number) => {\n  return new Intl.NumberFormat('fr-FR', {\n    style: 'currency',\n    currency: 'EUR',\n    maximumFractionDigits: 2\n  }).format(value);\n};\n\n// Formate les pourcentages\nconst formatPercentage = (value: number) => {\n  return new Intl.NumberFormat('fr-FR', {\n    style: 'percent',\n    maximumFractionDigits: 0\n  }).format(value / 100);\n};\n\n// Échelle linéaire avec des paliers de 30 minutes, de 0h à 8h\n// La plage va de 0 à 480 minutes (0 à 8h)\nconst sliderToHours = (value: number) => {\n  // Convertir de minutes (0-480) en heures (0-8)\n  return value / 60;\n};\n\n// Convertit les heures en valeur du slider (minutes)\nconst hoursToSlider = (hours: number) => {\n  // Convertir les heures en minutes et arrondir à un multiple de 30 le plus proche\n  const minutes = Math.round(hours * 60 / 30) * 30;\n  // S'assurer que la valeur est dans la plage valide (0-480 minutes)\n  return Math.max(0, Math.min(480, minutes));\n};\n\n// Étiquettes pour le slider - affichage uniquement aux points spécifiés\nconst sliderMarks = [\n  { value: 0, label: '0h' },    // 0 minutes\n  { value: 120, label: '2h' },  // 120 minutes\n  { value: 240, label: '4h' },  // 240 minutes\n  { value: 360, label: '6h' },  // 360 minutes\n  { value: 480, label: '8h' }   // 480 minutes\n];\n\nconst RoiCalculator: React.FC = () => {\n  // États du formulaire\n  const [sliderValue, setSliderValue] = useState(hoursToSlider(2)); // 2h par défaut\n  const [taskHours, setTaskHours] = useState(2);\n  const [frequency, setFrequency] = useState<Frequency>('daily'); // Quotidienne par défaut\n  const [salaryMode, setSalaryMode] = useState<SalaryMode>('monthly');\n  const [hourlyNet, setHourlyNet] = useState<number | undefined>(undefined);\n  const [monthlyNet, setMonthlyNet] = useState<number>(DEFAULT_MONTHLY_NET_SALARY);\n  const [annualBrut, setAnnualBrut] = useState<number | undefined>(undefined);\n  const [employees, setEmployees] = useState(2); // 2 employés par défaut\n  const [cost, setCost] = useState(5000);\n  \n  // État pour les résultats du calcul\n  const [results, setResults] = useState<any>(null);\n  \n  // Fonction debounce pour limiter les calculs\n  const debounce = (func: Function, wait: number) => {\n    let timeout: NodeJS.Timeout;\n    return (...args: any[]) => {\n      clearTimeout(timeout);\n      timeout = setTimeout(() => func(...args), wait);\n    };\n  };\n  \n  // Fonction pour arrondir à 2 décimales\n  const roundToTwoDecimals = (value: number): number => {\n    return Math.round(value * 100) / 100;\n  };\n\n  // Synchronise les différents formats de salaire\n  const syncSalary = useCallback((\n    mode: SalaryMode, \n    hourly?: number, \n    monthly?: number, \n    annual?: number\n  ) => {\n    if (mode === 'hourly' && hourly !== undefined) {\n      const hourlyRounded = roundToTwoDecimals(hourly);\n      const monthlyCalculated = roundToTwoDecimals(hourlyRounded * 151.67);\n      const annualCalculated = roundToTwoDecimals((hourlyRounded * 151.67 / 0.757) * 12);\n      \n      setHourlyNet(hourlyRounded);\n      setMonthlyNet(monthlyCalculated);\n      setAnnualBrut(annualCalculated);\n    } else if (mode === 'monthly' && monthly !== undefined) {\n      const monthlyRounded = roundToTwoDecimals(monthly);\n      const hourlyCalculated = roundToTwoDecimals(monthlyRounded / 151.67);\n      const annualCalculated = roundToTwoDecimals((monthlyRounded / 0.757) * 12);\n      \n      setHourlyNet(hourlyCalculated);\n      setMonthlyNet(monthlyRounded);\n      setAnnualBrut(annualCalculated);\n    } else if (mode === 'annual' && annual !== undefined) {\n      const annualRounded = roundToTwoDecimals(annual);\n      const monthlyCalculated = roundToTwoDecimals((annualRounded * 0.757) / 12);\n      const hourlyCalculated = roundToTwoDecimals(monthlyCalculated / 151.67);\n      \n      setHourlyNet(hourlyCalculated);\n      setMonthlyNet(monthlyCalculated);\n      setAnnualBrut(annualRounded);\n    }\n  }, []);\n  \n  // Mettre à jour les résultats\n  const updateResults = useCallback(debounce(() => {\n    try {\n      const input = {\n        taskHours,\n        frequency,\n        salaryMode,\n        hourlyNet,\n        monthlyNet,\n        annualBrut,\n        employees,\n        cost\n      };\n      \n      const calculationResults = calculateRoi(input);\n      setResults(calculationResults);\n    } catch (error) {\n      console.error(\"Erreur de calcul ROI:\", error);\n    }\n  }, 300), [taskHours, frequency, salaryMode, hourlyNet, monthlyNet, annualBrut, employees, cost]);\n  \n  // Lancer le calcul à chaque changement d'entrée\n  useEffect(() => {\n    updateResults();\n  }, [taskHours, frequency, employees, cost, hourlyNet, monthlyNet, annualBrut, updateResults]);\n  \n  // Initialiser les salaires\n  useEffect(() => {\n    syncSalary('monthly', undefined, DEFAULT_MONTHLY_NET_SALARY);\n  }, [syncSalary]);\n  \n  // Mise à jour du slider\n  const handleSliderChange = (value: number[]) => {\n    const newValue = value[0];\n    setSliderValue(newValue);\n    setTaskHours(sliderToHours(newValue));\n  };\n  \n  // Déterminer la classe CSS pour le ROI en fonction de sa valeur\n  const getRoiColorClass = (percentage: number) => {\n    if (percentage < 0) return 'text-red-500';\n    if (percentage < 100) return 'text-amber-500';\n    if (percentage < 200) return 'text-emerald-500';\n    return 'text-blue-500';\n  };\n  \n  return (\n    <motion.section \n      id=\"roi-calculator\"\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.8 }}\n      className=\"py-8 bg-gradient-to-b from-gray-900 to-gray-800 relative overflow-hidden\"\n    >\n      <div className=\"absolute inset-0 opacity-60 bg-pattern\"></div>\n      \n      <div className=\"container mx-auto px-4 relative z-10\">\n        <motion.div\n          initial={{ y: 20, opacity: 0 }}\n          animate={{ y: 0, opacity: 1 }}\n          transition={{ duration: 0.6 }}\n          className=\"text-center mb-8\"\n        >\n          <h2 className=\"text-3xl md:text-4xl font-bold mb-4 text-white\">\n            Calculez votre <span className=\"bg-gradient-to-r from-cyan-400 to-purple-600 bg-clip-text text-transparent\">retour sur investissement</span>\n          </h2>\n          <p className=\"text-lg text-gray-300 max-w-2xl mx-auto\">\n            Estimez rapidement les économies réalisées grâce à l'automatisation de vos tâches répétitives\n          </p>\n        </motion.div>\n        \n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 items-start\">\n          {/* Formulaire d'entrée */}\n          <motion.div\n            initial={{ x: -20, opacity: 0 }}\n            animate={{ x: 0, opacity: 1 }}\n            transition={{ duration: 0.6, delay: 0.2 }}\n            className=\"w-full\"\n          >\n            <Card className=\"backdrop-blur-lg bg-gray-800/40 border border-gray-700 shadow-xl rounded-2xl\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-xl font-bold mb-6 text-white flex items-center gap-2\">\n                  <Calculator className=\"h-5 w-5 text-blue-400\" />\n                  Paramètres de la tâche\n                </h3>\n                \n                {/* Durée de la tâche */}\n                <div className=\"mb-8\">\n                  <div className=\"flex justify-between items-center mb-2\">\n                    <Label className=\"text-white flex items-center gap-2\">\n                      <Clock className=\"h-4 w-4 text-blue-400\" />\n                      Durée actuelle de la tâche: <span className=\"font-bold text-blue-400 ml-2\">{formatHours(taskHours)}</span>\n                    </Label>\n                  </div>\n                  \n                  <div className=\"px-2\">\n                    <Slider\n                      value={[sliderValue]}\n                      min={0}\n                      max={480}\n                      step={30}\n                      onValueChange={handleSliderChange}\n                      className=\"mb-2\"\n                    />\n                    <div className=\"flex justify-between text-xs text-gray-400\">\n                      {sliderMarks.map((mark) => (\n                        <span key={mark.value}>{mark.label}</span>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n                \n                {/* Fréquence */}\n                <div className=\"mb-8\">\n                  <Label className=\"text-white flex items-center gap-2 mb-3\">\n                    <Calendar className=\"h-4 w-4 text-blue-400\" />\n                    Fréquence d'exécution\n                  </Label>\n                  \n                  <RadioGroup\n                    value={frequency}\n                    onValueChange={(value) => setFrequency(value as Frequency)}\n                    className=\"grid grid-cols-3 gap-3\"\n                  >\n                    <div className=\"flex items-center justify-center space-x-2 bg-gray-700/50 rounded-lg px-4 py-2 cursor-pointer hover:bg-gray-700 transition\">\n                      <RadioGroupItem value=\"daily\" id=\"daily\" />\n                      <Label htmlFor=\"daily\" className=\"text-gray-200 cursor-pointer\">Quotidienne</Label>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-center space-x-2 bg-gray-700/50 rounded-lg px-4 py-2 cursor-pointer hover:bg-gray-700 transition\">\n                      <RadioGroupItem value=\"weekly\" id=\"weekly\" />\n                      <Label htmlFor=\"weekly\" className=\"text-gray-200 cursor-pointer\">Hebdomadaire</Label>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-center space-x-2 bg-gray-700/50 rounded-lg px-4 py-2 cursor-pointer hover:bg-gray-700 transition\">\n                      <RadioGroupItem value=\"monthly\" id=\"monthly\" />\n                      <Label htmlFor=\"monthly\" className=\"text-gray-200 cursor-pointer\">Mensuelle</Label>\n                    </div>\n                  </RadioGroup>\n                </div>\n                \n                {/* Salaire */}\n                <div className=\"mb-8\">\n                  <Label className=\"text-white flex items-center gap-2 mb-3\">\n                    <Euro className=\"h-4 w-4 text-blue-400\" />\n                    Salaire\n                  </Label>\n                  \n                  <div className=\"grid grid-cols-3 gap-3 mb-4\">\n                    <Button\n                      variant={salaryMode === 'hourly' ? 'default' : 'outline'}\n                      size=\"sm\"\n                      onClick={() => setSalaryMode('hourly')}\n                      className={salaryMode === 'hourly' ? 'bg-gradient-to-r from-cyan-500 to-purple-600 border-0' : ''}\n                    >\n                      Horaire net\n                    </Button>\n                    \n                    <Button\n                      variant={salaryMode === 'monthly' ? 'default' : 'outline'}\n                      size=\"sm\"\n                      onClick={() => setSalaryMode('monthly')}\n                      className={salaryMode === 'monthly' ? 'bg-gradient-to-r from-cyan-500 to-purple-600 border-0' : ''}\n                    >\n                      Mensuel net\n                    </Button>\n                    \n                    <Button\n                      variant={salaryMode === 'annual' ? 'default' : 'outline'}\n                      size=\"sm\"\n                      onClick={() => setSalaryMode('annual')}\n                      className={salaryMode === 'annual' ? 'bg-gradient-to-r from-cyan-500 to-purple-600 border-0' : ''}\n                    >\n                      Annuel brut\n                    </Button>\n                  </div>\n                  \n                  <div className=\"mb-3\">\n                    {salaryMode === 'hourly' && (\n                      <div className=\"flex items-center space-x-2\">\n                        <Input\n                          type=\"number\"\n                          value={hourlyNet?.toString() || ''}\n                          onChange={(e) => {\n                            const value = parseFloat(e.target.value);\n                            if (!isNaN(value) && value >= 0) {\n                              syncSalary('hourly', value);\n                            }\n                          }}\n                          className=\"bg-gray-700/50 border-gray-600 text-white\"\n                          placeholder=\"Salaire horaire net\"\n                        />\n                        <span className=\"text-gray-300\">€/h</span>\n                      </div>\n                    )}\n                    \n                    {salaryMode === 'monthly' && (\n                      <div className=\"flex items-center space-x-2\">\n                        <Input\n                          type=\"number\"\n                          value={monthlyNet?.toString() || ''}\n                          onChange={(e) => {\n                            const value = parseFloat(e.target.value);\n                            if (!isNaN(value) && value >= 0) {\n                              syncSalary('monthly', undefined, value);\n                            }\n                          }}\n                          className=\"bg-gray-700/50 border-gray-600 text-white\"\n                          placeholder=\"Salaire mensuel net\"\n                        />\n                        <span className=\"text-gray-300\">€/mois</span>\n                      </div>\n                    )}\n                    \n                    {salaryMode === 'annual' && (\n                      <div className=\"flex items-center space-x-2\">\n                        <Input\n                          type=\"number\"\n                          value={annualBrut?.toString() || ''}\n                          onChange={(e) => {\n                            const value = parseFloat(e.target.value);\n                            if (!isNaN(value) && value >= 0) {\n                              syncSalary('annual', undefined, undefined, value);\n                            }\n                          }}\n                          className=\"bg-gray-700/50 border-gray-600 text-white\"\n                          placeholder=\"Salaire annuel brut\"\n                        />\n                        <span className=\"text-gray-300\">€/an</span>\n                      </div>\n                    )}\n                  </div>\n                  \n                  <div className=\"text-xs text-gray-400 italic\">\n                    {salaryMode !== 'hourly' && (\n                      <p>Salaire horaire équivalent: <span className=\"text-blue-400\">{formatCurrencyWithDecimals(hourlyNet || 0)}/h</span></p>\n                    )}\n                    {salaryMode !== 'monthly' && (\n                      <p>Salaire mensuel équivalent: <span className=\"text-blue-400\">{formatCurrencyWithDecimals(monthlyNet || 0)}/mois</span></p>\n                    )}\n                    {salaryMode !== 'annual' && (\n                      <p>Salaire annuel équivalent: <span className=\"text-blue-400\">{formatCurrencyWithDecimals(annualBrut || 0)}/an</span></p>\n                    )}\n                  </div>\n                </div>\n                \n                {/* Nombre d'employés */}\n                <div className=\"mb-8 text-center\">\n                  <Label className=\"text-white flex items-center justify-center gap-2 mb-3\">\n                    <Users className=\"h-4 w-4 text-blue-400\" />\n                    Nombre d'employés effectuant cette tâche\n                  </Label>\n                  \n                  <div className=\"flex items-center justify-center\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"icon\"\n                      onClick={() => setEmployees(Math.max(1, employees - 1))}\n                      disabled={employees <= 1}\n                      className=\"rounded-r-none h-10\"\n                    >\n                      -\n                    </Button>\n                    <div className=\"w-20 text-center rounded-none bg-gray-700/50 border border-gray-600 text-white h-10 flex items-center justify-center\">\n                      <span className=\"text-white font-medium\">{employees}</span>\n                    </div>\n                    <Button\n                      variant=\"outline\"\n                      size=\"icon\"\n                      onClick={() => setEmployees(employees + 1)}\n                      className=\"rounded-l-none h-10\"\n                    >\n                      +\n                    </Button>\n                  </div>\n                </div>\n                \n                {/* Coût d'automatisation */}\n                <div className=\"mb-4\">\n                  <Label className=\"text-white flex items-center gap-2 mb-3\">\n                    <Euro className=\"h-4 w-4 text-blue-400\" />\n                    Coût estimé de l'automatisation\n                  </Label>\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    <Input\n                      type=\"number\"\n                      value={cost}\n                      onChange={(e) => {\n                        const value = parseFloat(e.target.value);\n                        if (!isNaN(value) && value >= 0) {\n                          setCost(value);\n                        }\n                      }}\n                      className=\"bg-gray-700/50 border-gray-600 text-white\"\n                      placeholder=\"Coût en euros\"\n                    />\n                    <span className=\"text-gray-300\">€</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n          \n          {/* Résultats */}\n          <motion.div\n            initial={{ x: 20, opacity: 0 }}\n            animate={{ x: 0, opacity: 1 }}\n            transition={{ duration: 0.6, delay: 0.4 }}\n            className=\"w-full\"\n          >\n            {results && (\n              <div className=\"space-y-6\">\n                {/* Économies par an/mois */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {/* Par an */}\n                  <Card className=\"border border-gray-700 shadow-2xl overflow-hidden rounded-2xl bg-gradient-to-br from-gray-800/90 to-gray-900/90 backdrop-blur-md hover:shadow-blue-500/10 transition-all duration-300\">\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-blue-500/10 to-blue-600/10 opacity-0 group-hover:opacity-100 transition-all duration-500\" />\n                    <CardContent className=\"p-6 relative\">\n                      <h4 className=\"text-lg font-semibold mb-3 text-gray-200\">Par an</h4>\n                      \n                      <div className=\"space-y-2 mb-4\">\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-400\">Heures économisées:</span>\n                          <span className=\"text-blue-400 font-bold\">{formatHours(results.hoursYearly)}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-400\">Économies financières:</span>\n                          <span className=\"text-green-400 font-bold\">{formatCurrency(results.savingsYearly)}</span>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                  \n                  {/* Par mois */}\n                  <Card className=\"border border-gray-700 shadow-2xl overflow-hidden rounded-2xl bg-gradient-to-br from-gray-800/90 to-gray-900/90 backdrop-blur-md hover:shadow-purple-500/10 transition-all duration-300\">\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-purple-500/10 to-purple-600/10 opacity-0 group-hover:opacity-100 transition-all duration-500\" />\n                    <CardContent className=\"p-6 relative\">\n                      <h4 className=\"text-lg font-semibold mb-3 text-gray-200\">Par mois</h4>\n                      \n                      <div className=\"space-y-2 mb-4\">\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-400\">Heures économisées:</span>\n                          <span className=\"text-purple-400 font-bold\">{formatHours(results.hoursMonthly)}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-400\">Économies financières:</span>\n                          <span className=\"text-green-400 font-bold\">{formatCurrency(results.savingsMonthly)}</span>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n                \n                {/* Rentabilité */}\n                <Card className=\"border border-gray-700 shadow-2xl rounded-2xl overflow-hidden backdrop-blur-md bg-gradient-to-br from-gray-800/80 to-gray-900/90 relative\">\n                  <div className=\"absolute inset-0 bg-dots-pattern opacity-30\"></div>\n                  \n                  <div className=\"p-6 relative z-10\">\n                    <div className=\"flex items-center gap-2 mb-4\">\n                      <TrendingUp className=\"h-5 w-5 text-cyan-400\" />\n                      <h3 className=\"text-xl font-bold text-white\">Rentabilité</h3>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n                      {/* ROI */}\n                      <div className=\"bg-gray-800/50 rounded-xl p-4 border border-gray-700\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <h4 className=\"text-sm font-medium text-gray-400\">ROI</h4>\n                          <TooltipProvider>\n                            <Tooltip>\n                              <TooltipTrigger>\n                                <Info className=\"h-4 w-4 text-gray-500\" />\n                              </TooltipTrigger>\n                              <TooltipContent className=\"bg-gray-900 text-gray-200 border-gray-700\">\n                                <p className=\"max-w-xs\">Retour sur investissement</p>\n                              </TooltipContent>\n                            </Tooltip>\n                          </TooltipProvider>\n                        </div>\n                        <p className={`text-2xl font-bold ${getRoiColorClass(results.roiPercentage)}`}>\n                          {formatPercentage(results.roiPercentage)}\n                        </p>\n                      </div>\n                      \n                      {/* Temps avant rentabilité */}\n                      <div className=\"bg-gray-800/50 rounded-xl p-4 border border-gray-700\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <h4 className=\"text-sm font-medium text-gray-400\">Temps avant rentabilité</h4>\n                          <TooltipProvider>\n                            <Tooltip>\n                              <TooltipTrigger>\n                                <Info className=\"h-4 w-4 text-gray-500\" />\n                              </TooltipTrigger>\n                              <TooltipContent className=\"bg-gray-900 text-gray-200 border-gray-700\">\n                                <p className=\"max-w-xs\">Temps nécessaire pour que les économies dépassent l'investissement</p>\n                              </TooltipContent>\n                            </Tooltip>\n                          </TooltipProvider>\n                        </div>\n                        <p className=\"text-2xl font-bold text-amber-400\">\n                          {results.monthsToBreakeven.toFixed(1)} mois\n                        </p>\n                      </div>\n                      \n                      {/* Date de rentabilité */}\n                      <div className=\"bg-gray-800/50 rounded-xl p-4 border border-gray-700\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <h4 className=\"text-sm font-medium text-gray-400\">Date de rentabilité</h4>\n                          <TooltipProvider>\n                            <Tooltip>\n                              <TooltipTrigger>\n                                <Info className=\"h-4 w-4 text-gray-500\" />\n                              </TooltipTrigger>\n                              <TooltipContent className=\"max-w-xs bg-gray-900 text-gray-200 border-gray-700\">\n                                <p>Date à laquelle votre investissement sera rentabilisé (inclut 20 jours de développement)</p>\n                              </TooltipContent>\n                            </Tooltip>\n                          </TooltipProvider>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <CalendarDays className=\"h-5 w-5 text-blue-400\" />\n                          <p className=\"text-xl font-bold text-white\">\n                            {results.profitableDate instanceof Date && !isNaN(results.profitableDate.getTime()) \n                              ? format(results.profitableDate, 'dd MMM yyyy', { locale: fr })\n                              : \"Calcul en cours...\"}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center p-3 rounded-lg bg-blue-950/30 border border-blue-900/50 mb-6\">\n                      <Info className=\"h-5 w-5 text-blue-400 mr-2 shrink-0\" />\n                      <p className=\"text-sm text-blue-200\">\n                        Estimation basée sur {DEV_DAYS} jours de développement moyen et vos données\n                      </p>\n                    </div>\n                    \n                    <a\n                      href=\"https://calendly.com/brice-gachadoat/30min\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"w-full block text-center py-4 px-6 rounded-xl bg-gradient-to-r from-cyan-500 to-blue-600 hover:from-cyan-600 hover:to-blue-700 text-white font-medium transition-all duration-300 shadow-lg hover:shadow-cyan-500/20 group\"\n                    >\n                      <span className=\"flex items-center justify-center gap-2\">\n                        <Sparkles className=\"h-5 w-5 text-white group-hover:animate-pulse\" />\n                        Déployer mon automatisation et commencer à économiser !\n                      </span>\n                    </a>\n                  </div>\n                </Card>\n              </div>\n            )}\n          </motion.div>\n        </div>\n      </div>\n    </motion.section>\n  );\n};\n\nexport default RoiCalculator;","size_bytes":28262},"client/src/components/ServicesSection.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { CheckCircle2 } from \"lucide-react\";\nimport { Workflow, Bot } from \"lucide-react\";\n\n// Services\nconst services = [\n  {\n    icon: Workflow,\n    title: \"Automatisation de workflows\",\n    description: \"Libérez votre équipe des tâches répétitives grâce à une automatisation efficace.\",\n    benefits: [\n      \"Gain de temps jusqu'à 70%\",\n      \"Zéro erreur humaine\",\n      \"Suivi en temps réel\"\n    ],\n    details: \"Transformez les processus manuels en flux automatisés.\",\n    primary: true,\n    pattern: `url(\"data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23ff8a4c' fill-opacity='0.15'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")`\n  },\n  {\n    icon: Bot,\n    title: \"Chatbots intelligents\",\n    description: \"Un assistant virtuel disponible 24/7 pour améliorer votre service client.\",\n    benefits: [\n      \"Réponse instantanée\",\n      \"Qualification des leads\",\n      \"Support client amélioré\"\n    ],\n    details: \"Des chatbots qui comprennent vraiment vos clients, assurant un dialogue interactif.\",\n    primary: false,\n    pattern: `url(\"data:image/svg+xml,%3Csvg width='52' height='26' viewBox='0 0 52 26' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%234299e1' fill-opacity='0.15'%3E%3Cpath d='M10 10c0-2.21-1.79-4-4-4-3.314 0-6-2.686-6-6h2c0 2.21 1.79 4 4 4 3.314 0 6 2.686 6 6 0 2.21 1.79 4 4 4 3.314 0 6 2.686 6 6 0 2.21 1.79 4 4 4v2c-3.314 0-6-2.686-6-6 0-2.21-1.79-4-4-4-3.314 0-6-2.686-6-6zm25.464-1.95l8.486 8.486-1.414 1.414-8.486-8.486 1.414-1.414z' /%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")`\n  }\n];\n\nexport default function ServicesSection() {\n  return (\n    <section \n      id=\"services\" \n      className=\"py-16 bg-gradient-to-b from-gray-900 to-gray-800 relative overflow-hidden\"\n    >\n      <div className=\"container mx-auto px-4\">\n        <h2 className=\"section-title text-center text-4xl font-bold text-white mb-12\">\n          <motion.span\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n          >\n            Nos Services\n          </motion.span>\n        </h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n          {services.map((service, index) => (\n            <motion.div\n              key={index}\n              initial={{ opacity: 0, y: 50 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.5, delay: index * 0.2 }}\n              whileHover={{ \n                scale: 1.02,\n                rotateY: 5,\n                z: 50\n              }}\n              className=\"h-full perspective-1000\"\n            >\n              <Card \n                className={`h-full border-0 shadow-2xl transition-all duration-300 bg-gray-900 ${\n                  service.primary ? 'hover:shadow-orange-500/20' : 'hover:shadow-blue-500/20'\n                } relative group overflow-hidden rounded-xl`}\n                style={{\n                  backgroundImage: service.pattern,\n                  backgroundSize: '200%',\n                  backgroundPosition: 'center',\n                  boxShadow: service.primary \n                    ? '0 0 40px -10px rgba(255, 138, 76, 0.2)' \n                    : '0 0 40px -10px rgba(66, 153, 225, 0.2)'\n                }}\n              >\n                <motion.div \n                  className={`absolute inset-0 ${\n                    service.primary \n                      ? 'bg-gradient-to-r from-orange-500/20 to-orange-600/20' \n                      : 'bg-gradient-to-r from-blue-500/20 to-blue-600/20'\n                  } opacity-0 group-hover:opacity-100 transition-all duration-500`}\n                  whileHover={{ scale: 1.1 }}\n                />\n                <CardContent className=\"p-8 relative z-10\">\n                  <motion.div \n                    className={`w-16 h-16 rounded-2xl flex items-center justify-center mb-6 ${\n                      service.primary \n                        ? 'bg-gradient-to-r from-orange-500 to-orange-600' \n                        : 'bg-gradient-to-r from-blue-500 to-blue-600'\n                    } shadow-lg ring-2 ring-offset-2 ring-offset-gray-900 ${\n                      service.primary ? 'ring-orange-500/50' : 'ring-blue-500/50'\n                    }`}\n                    whileHover={{ \n                      scale: 1.1,\n                      rotate: 5\n                    }}\n                    transition={{\n                      type: \"spring\",\n                      stiffness: 300\n                    }}\n                  >\n                    <service.icon className=\"h-8 w-8 text-white\" />\n                  </motion.div>\n                  <motion.h3 \n                    className=\"text-2xl font-bold mb-3 text-white\"\n                    whileHover={{ x: 10 }}\n                    transition={{ type: \"spring\", stiffness: 300 }}\n                  >\n                    {service.title}\n                  </motion.h3>\n                  <p className={`text-xl font-semibold mb-4 ${\n                    service.primary ? 'text-orange-400' : 'text-blue-400'\n                  }`}>\n                    {service.description}\n                  </p>\n                  <p className=\"text-gray-300 mb-6\">{service.details}</p>\n                  <motion.div \n                    className=\"space-y-4\"\n                    initial={{ opacity: 0 }}\n                    whileInView={{ opacity: 1 }}\n                    transition={{ delay: 0.2 }}\n                  >\n                    {service.benefits.map((benefit, index) => (\n                      <motion.div \n                        key={index} \n                        className=\"flex items-center gap-3 text-gray-200\"\n                        initial={{ x: -20, opacity: 0 }}\n                        whileInView={{ x: 0, opacity: 1 }}\n                        transition={{ delay: index * 0.1 }}\n                        whileHover={{ x: 10 }}\n                      >\n                        <CheckCircle2 className={`h-5 w-5 ${\n                          service.primary ? 'text-orange-500' : 'text-blue-500'\n                        }`} />\n                        <span className=\"text-lg\">{benefit}</span>\n                      </motion.div>\n                    ))}\n                  </motion.div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":6736},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-persistent-toast.ts":{"content":"\nimport { useEffect } from 'react';\nimport { useToast } from './use-toast';\n\nexport function usePersistentToast() {\n  const { toast } = useToast();\n\n  useEffect(() => {\n    // Vérifier s'il y a un toast en attente dans le localStorage\n    const pendingToast = localStorage.getItem('pendingToast');\n    if (pendingToast) {\n      // Afficher le toast\n      try {\n        const toastData = JSON.parse(pendingToast);\n        toast(toastData);\n      } catch (e) {\n        console.error('Erreur lors du parsing du toast:', e);\n      }\n      // Supprimer le toast du localStorage\n      localStorage.removeItem('pendingToast');\n    }\n  }, [toast]);\n\n  // Fonction pour sauvegarder un toast pour qu'il soit affiché après la navigation\n  const setPendingToast = (toastData: any) => {\n    localStorage.setItem('pendingToast', JSON.stringify(toastData));\n  };\n\n  return { setPendingToast };\n};\n","size_bytes":885},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient } from \"@tanstack/react-query\";\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: async ({ queryKey }) => {\n        const res = await fetch(queryKey[0] as string, {\n          credentials: \"include\",\n        });\n\n        if (!res.ok) {\n          if (res.status >= 500) {\n            throw new Error(`${res.status}: ${res.statusText}`);\n          }\n\n          throw new Error(`${res.status}: ${await res.text()}`);\n        }\n\n        return res.json();\n      },\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    }\n  },\n});\n","size_bytes":698},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/About.tsx":{"content":"\nimport { useEffect } from \"react\";\nimport Footer from \"@/components/Footer\";\nimport Navbar from \"@/components/Navbar\";\nimport { Button } from \"@/components/ui/button\";\nimport { motion } from \"framer-motion\";\n\nexport default function About() {\n  useEffect(() => {\n    // Scroll to top when the page loads\n    window.scrollTo(0, 0);\n  }, []);\n\n  return (\n    <motion.div \n      className=\"min-h-screen bg-gray-900 text-gray-100\"\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      exit={{ opacity: 0 }}\n      transition={{ duration: 0.4 }}\n    >\n      <Navbar />\n      <main className=\"container mx-auto px-4 py-16\">\n        <div className=\"flex flex-col items-center mb-10 mt-12\">\n          <h1 className=\"text-4xl font-bold text-center\">À propos</h1>\n        </div>\n\n        <div className=\"max-w-3xl mx-auto prose prose-invert\">\n          <h2 className=\"text-3xl font-semibold mb-6 text-white\">🚀 Simplifier votre quotidien, c'est mon métier.</h2>\n\n          <p className=\"text-gray-300 mb-6\">\n            Je suis <strong>Brice Gachadoat</strong>, expert en automatisation et intelligence artificielle. Vous êtes probablement ici parce que vous passez trop de temps sur des tâches répétitives ou que vous souhaitez tirer parti des dernières avancées en IA pour votre activité. Bonne nouvelle, c'est exactement ma spécialité.\n          </p>\n\n          <p className=\"text-gray-300 mb-6\">\n            Ingénieur informatique avec plus de 10 ans d'expérience dans l'IT, j'ai toujours cherché des moyens innovants de faciliter le quotidien professionnel des personnes autour de moi.\n          </p>\n\n          <h3 className=\"text-2xl font-semibold mb-4 text-white\">💡 Mon déclic personnel</h3>\n\n          <p className=\"text-gray-300 mb-6\">\n            Tout a changé quand j'ai voulu aider ma femme, nutritionniste, à simplifier la gestion chronophage de ses dossiers et rendez-vous clients. Ma frustration de ne pas pouvoir l'assister efficacement malgré mes compétences techniques s'est envolée lorsque j'ai découvert les plateformes d'automatisation comme Make.com et n8n.\n          </p>\n\n          <p className=\"text-gray-300 mb-6\">\n            Lorsque ChatGPT a été mis à disposition du public, j'ai immédiatement compris le potentiel immense de cette technologie et commencé à l'intégrer dans mes solutions. <strong>Résultat concret</strong> : ma femme a réduit de 90% le temps consacré à la génération de menus et de 70% ses tâches administratives. Elle a pu accueillir 60% plus de clientes sans augmentation significative de sa charge de travail.\n          </p>\n\n          <p className=\"text-gray-300 mb-6\">\n            Aujourd'hui, je vous propose mon expertise pour simplifier et optimiser vos propres processus métier grâce à l'automatisation intelligente et l'IA conversationnelle.\n          </p>\n\n          <h3 className=\"text-2xl font-semibold mb-4 text-white\">✅ Ce que je peux vous apporter concrètement :</h3>\n\n          <ul className=\"text-gray-300 mb-6 space-y-3\">\n            <li className=\"flex items-start\">\n              <span className=\"mr-2\">🔄</span>\n              <span><strong>Automatisation des tâches chronophages</strong> — Comme la transformation automatique de CV au format de votre entreprise, réduisant un travail de 30 minutes à quelques secondes</span>\n            </li>\n            <li className=\"flex items-start\">\n              <span className=\"mr-2\">💬</span>\n              <span><strong>Développement d'agents conversationnels intelligents</strong> — Par exemple, un chatbot capable de qualifier vos prospects et générer des propositions commerciales sur mesure</span>\n            </li>\n            <li className=\"flex items-start\">\n              <span className=\"mr-2\">🤖</span>\n              <span><strong>Assistants IA personnalisés</strong> — À l'image de l'assistant que j'ai développé pour gérer mes emails, contacts et planifier mes réunions, libérant plus de 10 heures par semaine</span>\n            </li>\n            <li className=\"flex items-start\">\n              <span className=\"mr-2\">🎓</span>\n              <span><strong>Formations sur mesure</strong> — J'accompagne vos équipes dans la maîtrise des solutions mises en place et propose des formations dédiées aux bonnes pratiques de l'IA pour garantir leur autonomie et maximiser votre retour sur investissement</span>\n            </li>\n          </ul>\n\n          <h3 className=\"text-2xl font-semibold mb-4 text-white\">🛠️ Mon expertise technique</h3>\n\n          <p className=\"text-gray-300 mb-6\">\n            Je conçois des chatbots avancés sur Voiceflow et développe des automatisations principalement sur n8n, avec des compétences complémentaires sur Make.com. J'intègre efficacement des outils comme Notion, Airtable et Supabase pour créer des écosystèmes connectés et performants.\n          </p>\n\n          <p className=\"text-gray-300 mb-6\">\n            J'ai accompagné avec succès des clients dans les secteurs du conseil, du marketing, de la formation, de l'organisation d'événements et des ESN, ainsi que de nombreux entrepreneurs indépendants.\n          </p>\n\n          <h3 className=\"text-2xl font-semibold mb-4 text-white\">🔒 Pourquoi me faire confiance ?</h3>\n\n          <ul className=\"text-gray-300 mb-6 space-y-3\">\n            <li className=\"flex items-start\">\n              <span className=\"mr-2\">📊</span>\n              <span><strong>Expérience confirmée</strong> : 10+ ans en gestion de projets IT, Data et automatisation, dont un parcours au sein du prestigieux cabinet <strong>MeltOne Advisory</strong> et du groupe de luxe mondial <strong>LVMH</strong></span>\n            </li>\n            <li className=\"flex items-start\">\n              <span className=\"mr-2\">✓</span>\n              <span><strong>Engagement concret</strong> : résultats garantis ou satisfait/remboursé</span>\n            </li>\n            <li className=\"flex items-start\">\n              <span className=\"mr-2\">🤝</span>\n              <span><strong>Relation durable</strong> : je vous accompagne au-delà de la mise en place technique, en formant vos équipes</span>\n            </li>\n          </ul>\n\n          <h3 className=\"text-2xl font-semibold mb-4 text-white\">📞 Passons à l'action</h3>\n\n          <p className=\"text-gray-300 mb-6\">\n            Vous souhaitez retrouver du temps pour vous concentrer sur l'essentiel de votre métier ? <strong>Réservez un appel gratuit de 30 minutes</strong> pour identifier ensemble les automatisations qui transformeront votre business. Sans engagement.\n          </p>\n\n          <div className=\"mt-12 text-center\">\n            <a\n              href=\"https://calendly.com/brice-gachadoat/30min\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"bg-gradient-to-r from-orange-500 to-orange-600 hover:from-orange-600 hover:to-orange-700 text-white px-8 py-3 rounded-md inline-block shadow-lg hover:shadow-xl transition-all duration-300 text-lg font-medium\"\n            >\n              Réservez un appel découverte gratuit\n            </a>\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </motion.div>\n  );\n}\n","size_bytes":7228},"client/src/pages/GapForm.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport * as z from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Card } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { usePersistentToast } from \"@/hooks/use-persistent-toast\";\nimport { Link } from \"wouter\";\nimport { RainbowText } from \"@/components/RainbowText\";\nimport { motion } from \"framer-motion\";\n\nconst formSchema = z.object({\n  // Section 1: Informations personnelles et entreprise (tous obligatoires)\n  firstName: z.string().min(1, \"Le prénom est requis\"),\n  lastName: z.string().min(1, \"Le nom est requis\"),\n  email: z.string().email(\"Email invalide\").min(1, \"L'email est requis\"),\n  phone: z.string().optional(),\n  companyName: z.string().min(1, \"Le nom de l'entreprise est requis\"),\n  website: z.string().min(1, \"L'URL de l'entreprise est requise\"),\n\n  // Les sections suivantes sont optionnelles\n  sector: z.string().optional(),\n  companySize: z.string().optional(),\n  revenue: z.string().optional(),\n  crm: z.string().optional(),\n  billing: z.string().optional(),\n  erp: z.string().optional(),\n  office: z.string().optional(),\n  reporting: z.string().optional(),\n  otherTools: z.string().optional(),\n  mainProcess: z.string().optional(),\n  frequency: z.string().optional(),\n  timeSpent: z.string().optional(),\n  existingSolutions: z.string().optional(),\n  expectedImpact: z.string().optional(),\n  expectedGains: z.string().optional(),\n  priorities: z.string().optional(),\n  comments: z.string().optional(),\n  availability: z.string().optional(),\n});\n\nexport default function GapForm() {\n  const [currentSection, setCurrentSection] = useState(0);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n  const { setPendingToast } = usePersistentToast();\n\n  const sections = [\n    {\n      title: \"Informations essentielles\",\n      subtitle: \"\",\n      fields: [\n        { name: \"firstName\", label: \"Prénom\", placeholder: \"Votre prénom\", type: \"text\", required: true },\n        { name: \"lastName\", label: \"Nom\", placeholder: \"Votre nom\", type: \"text\", required: true },\n        { name: \"email\", label: \"Adresse email\", placeholder: \"ex: prenom.nom@example.com\", type: \"email\", required: true },\n        { name: \"phone\", label: \"Téléphone\", placeholder: \"ex: +33 6 12 34 56 78\", type: \"tel\" },\n        { name: \"companyName\", label: \"Nom de l'entreprise\", placeholder: \"Nom de votre entreprise\", type: \"text\", required: true },\n        { name: \"website\", label: \"URL du site ou profil LinkedIn\", placeholder: \"ex: https://www.votreentreprise.fr\", type: \"url\", required: true }\n      ]\n    },\n    {\n      title: \"Informations sur l'entreprise\",\n      subtitle: \"Ces détails nous aideront à mieux comprendre votre contexte\",\n      fields: [\n        { name: \"sector\", label: \"Secteur d'activité\", placeholder: \"ex: E-commerce, Marketing, Distribution...\" },\n        {\n          name: \"companySize\",\n          label: \"Taille de l'entreprise\",\n          type: \"select\",\n          options: [\"1\", \"2 à 9\", \"10 à 50\", \"50 à 150\", \"150+\"]\n        },\n        {\n          name: \"revenue\",\n          label: \"Chiffre d'affaires annuel\",\n          type: \"select\",\n          options: [\"0 - 100k€\", \"100k - 1M€\", \"1M - 10M€\", \"+10M€\", \"Donnée confidentielle\"]\n        }\n      ]\n    },\n    {\n      title: \"Outils et infrastructure existants\",\n      subtitle: \"Ces informations nous permettront de proposer des automatisations compatibles avec vos outils\",\n      fields: [\n        { name: \"crm\", label: \"Outil CRM utilisé\", placeholder: \"ex: Hubspot, Salesforce, etc.\" },\n        { name: \"billing\", label: \"Outil de facturation/comptabilité\", placeholder: \"ex: Henrii, Indy, Facture.net, etc.\" },\n        { name: \"erp\", label: \"ERP ou outils de gestion commerciale\", placeholder: \"ex: Axonaut, noCRM, etc.\" },\n        { name: \"office\", label: \"Suite bureautique\", placeholder: \"ex: Google Workspace, Office 365, etc.\" },\n        { name: \"reporting\", label: \"Outils de reporting et d'analyse\", placeholder: \"ex: Power BI, Tableau, Google Sheets, etc.\" },\n        { name: \"otherTools\", label: \"Autres outils métiers\", placeholder: \"Précisez, si applicable\" }\n      ]\n    },\n    {\n      title: \"Processus à automatiser\",\n      subtitle: \"Plus vous nous en direz, plus nos recommandations seront pertinentes\",\n      fields: [\n        { name: \"mainProcess\", label: \"Quel processus manuel vous coûte le plus de temps ?\", placeholder: \"ex: Résolution manuelle des tickets de support\" },\n        { name: \"frequency\", label: \"Fréquence / Volume de ce processus\", placeholder: \"ex: quotidien, hebdomadaire, mensuel\" },\n        { name: \"timeSpent\", label: \"Temps moyen consacré à ce processus par semaine (en heures)\", placeholder: \"ex: 10\" },\n        { name: \"existingSolutions\", label: \"Avez-vous déjà envisagé des solutions d'automatisation ?\", placeholder: \"ex: Oui, j'ai pensé à utiliser un chatbot…\" }\n      ]\n    },\n    {\n      title: \"Objectifs et attentes\",\n      subtitle: \"Aidez-nous à comprendre vos priorités\",\n      fields: [\n        { name: \"expectedImpact\", label: \"Quel serait l'impact attendu sur votre productivité ?\", placeholder: \"ex: Gain de temps, réduction des erreurs, amélioration de la réactivité\" },\n        { name: \"expectedGains\", label: \"Quels gains attendez-vous (en temps, coûts, qualité) ?\", placeholder: \"ex: Réduction de 50% du temps de traitement\" },\n        { name: \"priorities\", label: \"Priorités en matière d'automatisation\", placeholder: \"ex: ROI rapide, facilité d'implémentation, scalabilité\" }\n      ]\n    },\n    {\n      title: \"Informations complémentaires\",\n      subtitle: \"Des précisions qui nous aideront à affiner nos recommandations\",\n      fields: [\n        { name: \"comments\", label: \"Commentaires ou contraintes spécifiques\", placeholder: \"Exemple : contraintes techniques, budget, etc.\" },\n        { name: \"availability\", label: \"Disponibilité pour un rendez-vous\", placeholder: \"Ex: Après-midi, matinée, jours précis, etc.\" }\n      ]\n    }\n  ];\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      firstName: \"\", lastName: \"\", email: \"\", phone: \"\",\n      companyName: \"\", website: \"\", sector: \"\", companySize: \"\", revenue: \"\",\n      crm: \"\", billing: \"\", erp: \"\", office: \"\", reporting: \"\", otherTools: \"\",\n      mainProcess: \"\", frequency: \"\", timeSpent: \"\", existingSolutions: \"\",\n      expectedImpact: \"\", expectedGains: \"\", priorities: \"\",\n      comments: \"\", availability: \"\",\n    },\n  });\n\n  const isFormValid = () => {\n    const values = form.getValues();\n    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n\n    // Vérifier que les champs obligatoires sont remplis et que l'email est valide\n    return (\n      !!values.firstName &&\n      !!values.lastName &&\n      !!values.email &&\n      emailRegex.test(values.email) &&\n      !!values.companyName &&\n      !!values.website\n    );\n  };\n\n  const isCurrentSectionValid = () => {\n    if (currentSection === 0) {\n      // Pour la première section, tous les champs sont obligatoires et l'email doit être valide\n      const values = form.getValues();\n      const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n\n      return (\n        !!values.firstName &&\n        !!values.lastName &&\n        !!values.email &&\n        emailRegex.test(values.email) &&\n        !!values.companyName &&\n        !!values.website\n      );\n    }\n    // Pour les autres sections, on permet d'avancer même si les champs sont vides\n    return true;\n  };\n\n  const onSubmit = async (data: z.infer<typeof formSchema>) => {\n    if (isSubmitting) return;\n    \n    setIsSubmitting(true);\n    try {\n      const params = new URLSearchParams();\n      Object.entries(data).forEach(([key, value]) => {\n        if (value) {\n          params.append(key, value.toString());\n        }\n      });\n\n      const webhookUrl = import.meta.env.VITE_N8N_WEBHOOK_URL ||\n                        window.location.origin + '/api/webhook-test';\n\n      const response = await fetch(`${webhookUrl}?${params.toString()}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Requested-With': 'XMLHttpRequest'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(`Erreur lors de l'envoi du formulaire: ${response.status}`);\n      }\n\n      // Stocker le toast pour qu'il soit affiché après redirection\n      setPendingToast({\n        title: \"Formulaire envoyé avec succès !\",\n        description: \"Nous vous contacterons rapidement avec des solutions personnalisées.\",\n      });\n\n      // Redirection vers la page d'accueil\n      window.location.href = '/';\n\n    } catch (error) {\n      console.error('Erreur:', error);\n      setIsSubmitting(false);\n      toast({\n        variant: \"destructive\",\n        title: \"Erreur\",\n        description: \"Une erreur est survenue lors de l'envoi du formulaire.\",\n      });\n    }\n  };\n\n\n  const progress = ((currentSection + 1) / sections.length) * 100;\n\n  const renderField = (field: any) => {\n    const fieldClasses = \"w-full text-center sm:text-left\";\n\n    if (field.type === \"select\" && field.options) {\n      return (\n        <FormField\n          key={field.name}\n          control={form.control}\n          name={field.name}\n          render={({ field: formField }) => (\n            <FormItem className={fieldClasses}>\n              <FormLabel className=\"text-gray-200\">\n                {field.label}\n                {field.required && <span className=\"text-red-500 ml-1\">*</span>}\n              </FormLabel>\n              <FormControl>\n                <Select onValueChange={formField.onChange} value={formField.value}>\n                  <SelectTrigger className=\"bg-gray-800 border-gray-700 text-gray-200\">\n                    <SelectValue placeholder={field.placeholder} />\n                  </SelectTrigger>\n                  <SelectContent className=\"bg-gray-800 border-gray-700\">\n                    {field.options.map((option: string) => (\n                      <SelectItem key={option} value={option} className=\"text-gray-200 hover:bg-gray-700\">\n                        {option}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </FormControl>\n              <FormMessage className=\"text-red-400\" />\n            </FormItem>\n          )}\n        />\n      );\n    }\n\n    return (\n      <FormField\n        key={field.name}\n        control={form.control}\n        name={field.name}\n        render={({ field: formField }) => (\n          <FormItem className={fieldClasses}>\n            <FormLabel className=\"text-gray-200\">\n              {field.label}\n              {field.required && <span className=\"text-red-500 ml-1\">*</span>}\n            </FormLabel>\n            <FormControl>\n              <Input\n                {...formField}\n                type={field.type}\n                placeholder={field.placeholder}\n                required={field.required}\n                className=\"bg-gray-800/50 border-gray-700 text-gray-200 placeholder:text-gray-500 w-full\"\n              />\n            </FormControl>\n            <FormMessage className=\"text-red-400\" />\n          </FormItem>\n        )}\n      />\n    );\n  };\n\n  return (\n    <motion.div \n      className=\"min-h-screen bg-gray-900 text-gray-100 relative pt-16\"\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      exit={{ opacity: 0 }}\n      transition={{ duration: 0.4 }}\n    >\n      <div className=\"container mx-auto px-4 max-w-2xl\">\n        <Link href=\"/\" className=\"absolute top-4 left-4 text-gray-400 hover:text-white transition-colors\">\n          ← Retour\n        </Link>\n\n        <div className=\"flex-grow flex flex-col justify-center mt-12 sm:mt-0\">\n          <h1 className=\"text-4xl sm:text-4xl md:text-4xl font-bold text-center mb-4 px-4 whitespace-normal\">\n            Générateur d'<RainbowText>Automatisations</RainbowText> Personnalisées\n          </h1>\n\n          <p className=\"text-lg sm:text-xl text-center text-gray-300 mb-8 max-w-2xl mx-auto px-4\">\n            Remplissez vos informations et recevez par email des automatisations qui vont faire exploser votre productivité\n          </p>\n\n          <div className=\"mb-8\">\n            <div className=\"h-2 bg-gray-800 rounded-full overflow-hidden\">\n              <motion.div\n                className=\"h-full bg-gradient-to-r from-orange-500 to-orange-600\"\n                initial={{ width: \"0%\" }}\n                animate={{ width: `${progress}%` }}\n                transition={{ duration: 0.5 }}\n              />\n            </div>\n          </div>\n\n          <Card className=\"p-4 sm:p-6 w-full bg-gray-800/50 border-gray-700\">\n            <div className=\"mb-6\">\n              <h2 className=\"text-xl font-semibold mb-2\">{sections[currentSection].title}</h2>\n              {sections[currentSection].subtitle && (\n                <p className=\"text-gray-400\">{sections[currentSection].subtitle}</p>\n              )}\n              {currentSection === 0 && (\n                <p className=\"text-sm text-orange-500 mt-2\">* Ces champs sont obligatoires pour recevoir vos automatisations personnalisées</p>\n              )}\n              {currentSection !== 0 && (\n                <p className=\"text-sm text-blue-400 mt-2\">Plus vous nous donnez d'informations, plus les automatisations proposées seront précises et adaptées à vos besoins</p>\n              )}\n            </div>\n\n            <Form {...form}>\n              <form className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  {sections[currentSection].fields.map(renderField)}\n                </div>\n\n                <div className=\"flex flex-col sm:flex-row justify-center sm:justify-between gap-4 mt-6\">\n                  <Button\n                    type=\"submit\"\n                    onClick={form.handleSubmit(onSubmit)}\n                    disabled={!isFormValid() || isSubmitting}\n                    className={`w-full sm:w-auto bg-gradient-to-r from-orange-500 to-orange-600 hover:from-orange-600 hover:to-orange-700 text-white ${\n                      (!isFormValid() || isSubmitting) ? 'opacity-50 cursor-not-allowed' : ''\n                    }`}\n                  >\n                    {isSubmitting ? (\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                        Envoi en cours...\n                      </div>\n                    ) : (\n                      'Recevoir mes automatisations'\n                    )}\n                  </Button>\n\n                  <div className=\"flex w-full justify-center sm:justify-start sm:w-auto gap-4\">\n                    {currentSection > 0 && (\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => setCurrentSection(prev => prev - 1)}\n                        className=\"flex-1 max-w-[45%] sm:max-w-none sm:flex-none border-gray-600 text-gray-300 hover:bg-gray-700\"\n                      >\n                        Précédent\n                      </Button>\n                    )}\n                    {currentSection < sections.length - 1 && (\n                      <Button\n                        type=\"button\"\n                        onClick={() => setCurrentSection(currentSection + 1)}\n                        disabled={!isCurrentSectionValid()}\n                        className={`flex-1 max-w-[45%] sm:max-w-none sm:flex-none bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white ${\n                          !isCurrentSectionValid() ? 'opacity-50 cursor-not-allowed' : ''\n                        }`}\n                      >\n                        Suivant\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              </form>\n            </Form>\n          </Card>\n        </div>\n      </div>\n    </motion.div>\n  );\n}","size_bytes":16552},"client/src/pages/Home.tsx":{"content":"import Navbar from \"@/components/Navbar\";\nimport HeroSection from \"@/components/HeroSection\";\nimport ProcessSection from \"@/components/ProcessSection\";\nimport ServicesSection from \"@/components/ServicesSection\";\nimport { AutomationExamplesSection } from \"@/components/AutomationExamplesSection\";\nimport FaqSection from \"@/components/FaqSection\";\nimport Footer from \"@/components/Footer\";\nimport RoiBanner, { RoiCta } from \"@/components/RoiBanner\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { RainbowText } from \"@/components/RainbowText\";\nimport { motion } from \"framer-motion\";\n\nexport default function Home() {\n  return (\n    <motion.div \n      className=\"min-h-screen bg-gray-900 text-gray-100 relative\"\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      exit={{ opacity: 0 }}\n      transition={{ duration: 0.4 }}\n    >\n      <div className=\"relative z-[2]\">        \n        <Navbar />\n        <main className=\"bg-gray-900\">\n          <HeroSection />\n          <ServicesSection />\n          <AutomationExamplesSection />\n          <RoiBanner />\n          <section className=\"py-20 bg-gray-800/50\">\n            <div className=\"container mx-auto px-4 text-center\">\n              <h2 className=\"text-5xl md:text-6xl font-bold mb-6 leading-tight\">\n                Découvrez les <span className=\"rainbow-text\">automatisations</span><br />\n                <span className=\"text-4xl md:text-5xl\">idéales pour votre business</span>\n              </h2>\n              <p className=\"text-xl text-gray-300 mb-12 max-w-2xl mx-auto\">\n                Utilisez notre générateur d'automatisations personnalisées et recevez des recommandations sur-mesure qui vont faire exploser votre productivité\n              </p>\n              <motion.div\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n                className=\"inline-block\"\n              >\n                <Link href=\"/gap\">\n                  <div className=\"relative group\">\n                    <div className=\"absolute -inset-0.5 bg-gradient-to-r from-orange-500 via-blue-500 to-orange-500 rounded-lg blur opacity-60 group-hover:opacity-100 transition duration-1000 group-hover:duration 200 animate-tilt\"></div>\n                    <button className=\"relative px-8 py-4 bg-gray-900 rounded-lg leading-none flex items-center\">\n                      <span className=\"text-gray-100 group-hover:text-white transition duration-200 text-lg font-medium\">\n                        Générer mes automatisations personnalisées\n                      </span>\n                    </button>\n                  </div>\n                </Link>\n              </motion.div>\n            </div>\n          </section>\n          <ProcessSection />\n          <FaqSection />\n          <RoiCta />\n          <section className=\"py-16 bg-gray-800\">\n            <div className=\"container mx-auto px-4 text-center\">\n              <h2 className=\"text-5xl md:text-6xl font-bold text-gray-100 mb-6 leading-tight\">\n                Prêt à <span className=\"rainbow-text\">transformer</span><br /> \n                <span className=\"text-4xl md:text-5xl\">votre entreprise ?</span>\n              </h2>\n              <div className=\"flex gap-4 justify-center flex-wrap\">\n                <Button\n                  size=\"lg\"\n                  className=\"bg-gradient-to-r from-orange-500 to-orange-600 hover:from-orange-600 hover:to-orange-700 text-white px-8 py-3\"\n                  onClick={() => window.open('https://calendly.com/brice-gachadoat/30min', '_blank')}\n                >\n                  Réserver votre consultation gratuite\n                </Button>\n              </div>\n            </div>\n          </section>\n        </main>\n        <Footer />\n      </div>\n    </motion.div>\n  );\n}","size_bytes":3811},"client/src/pages/Roi.tsx":{"content":"\nimport Navbar from \"@/components/Navbar\";\nimport Footer from \"@/components/Footer\";\nimport RoiCalculator from \"@/components/RoiCalculator\";\nimport ParticlesBackground from \"@/components/ParticlesBackground\";\nimport { motion } from \"framer-motion\";\nimport { useEffect } from \"react\";\n\nexport default function Roi() {\n  // Scroll to top on mount\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, []);\n\n  return (\n    <motion.div \n      className=\"min-h-screen bg-gray-900 text-gray-100\"\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      exit={{ opacity: 0 }}\n      transition={{ duration: 0.4 }}\n    >\n      <Navbar />\n      <main className=\"bg-gray-900\">\n        <div className=\"pt-20\">\n          <RoiCalculator />\n        </div>\n      </main>\n      <Footer />\n    </motion.div>\n  );\n}\n","size_bytes":806},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/utils/roi.ts":{"content":"import { addDays } from 'date-fns';\n\nexport const DEV_DAYS = 20; // temps de développement moyen\n\nexport type Frequency = 'daily' | 'weekly' | 'monthly';\nexport type SalaryMode = 'hourly' | 'monthly' | 'annual';\n\nexport interface RoiCalculationInput {\n  taskHours: number;        // Durée de la tâche en heures\n  frequency: Frequency;     // Fréquence d'exécution\n  salaryMode: SalaryMode;   // Mode d'affichage du salaire\n  hourlyNet?: number;       // Salaire horaire net\n  monthlyNet?: number;      // Salaire mensuel net\n  annualBrut?: number;      // Salaire annuel brut\n  employees: number;        // Nombre d'employés\n  cost: number;             // Coût de l'automatisation\n}\n\nexport interface RoiCalculationOutput {\n  hourlyNet: number;        // Salaire horaire net (calculé)\n  monthlyNet: number;       // Salaire mensuel net (calculé)\n  annualBrut: number;       // Salaire annuel brut (calculé)\n  hoursYearly: number;      // Heures économisées par an\n  hoursMonthly: number;     // Heures économisées par mois\n  savingsYearly: number;    // Économies financières par an\n  savingsMonthly: number;   // Économies financières par mois\n  roiPercentage: number;    // ROI en pourcentage\n  monthsToBreakeven: number; // Mois avant rentabilité\n  daysToBreakeven: number;   // Jours avant rentabilité\n  profitableDate: Date;      // Date de rentabilité\n}\n\nconst HOURS_PER_MONTH = 151.67;\nconst NET_TO_BRUT_RATIO = 0.757;\nconst DAYS_PER_MONTH = 30.44;\n\n// Constantes pour les fréquences d'exécution\nconst FREQUENCY_MULTIPLIERS = {\n  daily: 252,   // Jours ouvrés par an\n  weekly: 52,   // Semaines par an\n  monthly: 12,  // Mois par an\n};\n\n// Convertir entre les différents formats de salaire\nexport function convertSalary({\n  salaryMode,\n  hourlyNet,\n  monthlyNet,\n  annualBrut,\n}: Pick<RoiCalculationInput, 'salaryMode' | 'hourlyNet' | 'monthlyNet' | 'annualBrut'>): Pick<RoiCalculationOutput, 'hourlyNet' | 'monthlyNet' | 'annualBrut'> {\n  let calculatedMonthlyNet: number;\n  let calculatedHourlyNet: number;\n  let calculatedAnnualBrut: number;\n\n  switch (salaryMode) {\n    case 'hourly':\n      if (hourlyNet === undefined) throw new Error(\"Hourly net salary required\");\n      calculatedMonthlyNet = hourlyNet * HOURS_PER_MONTH;\n      calculatedHourlyNet = hourlyNet;\n      calculatedAnnualBrut = (calculatedMonthlyNet / NET_TO_BRUT_RATIO) * 12;\n      break;\n    case 'monthly':\n      if (monthlyNet === undefined) throw new Error(\"Monthly net salary required\");\n      calculatedMonthlyNet = monthlyNet;\n      calculatedHourlyNet = monthlyNet / HOURS_PER_MONTH;\n      calculatedAnnualBrut = (monthlyNet / NET_TO_BRUT_RATIO) * 12;\n      break;\n    case 'annual':\n      if (annualBrut === undefined) throw new Error(\"Annual brut salary required\");\n      calculatedMonthlyNet = (annualBrut * NET_TO_BRUT_RATIO) / 12;\n      calculatedHourlyNet = calculatedMonthlyNet / HOURS_PER_MONTH;\n      calculatedAnnualBrut = annualBrut;\n      break;\n    default:\n      throw new Error(\"Invalid salary mode\");\n  }\n\n  return {\n    hourlyNet: calculatedHourlyNet,\n    monthlyNet: calculatedMonthlyNet,\n    annualBrut: calculatedAnnualBrut,\n  };\n}\n\n// Calculer le ROI\nexport function calculateRoi(input: RoiCalculationInput): RoiCalculationOutput {\n  // Convertir les salaires\n  const { hourlyNet, monthlyNet, annualBrut } = convertSalary(input);\n  \n  // Calculer les heures économisées\n  const freqPerYear = FREQUENCY_MULTIPLIERS[input.frequency];\n  const hoursYearly = input.taskHours * freqPerYear * input.employees;\n  const hoursMonthly = hoursYearly / 12;\n  \n  // Calculer les économies financières\n  const savingsYearly = hoursYearly * hourlyNet;\n  const savingsMonthly = savingsYearly / 12;\n  \n  // Calculer le ROI\n  const roiPercentage = ((savingsYearly - input.cost) / input.cost) * 100;\n  const monthsToBreakeven = input.cost / savingsMonthly;\n  const daysToBreakeven = monthsToBreakeven * DAYS_PER_MONTH;\n  \n  // Calculer la date de rentabilité\n  const profitableDate = addDays(\n    new Date(), \n    DEV_DAYS + Math.round(daysToBreakeven)\n  );\n  \n  return {\n    hourlyNet,\n    monthlyNet,\n    annualBrut,\n    hoursYearly,\n    hoursMonthly,\n    savingsYearly,\n    savingsMonthly,\n    roiPercentage,\n    monthsToBreakeven,\n    daysToBreakeven,\n    profitableDate,\n  };\n}\n\n// Valeurs par défaut pour la France\nexport const DEFAULT_MONTHLY_NET_SALARY = 2735; // Moyenne en France (€)","size_bytes":4412},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"import * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1405},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ...props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ...props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2609},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1877},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"import * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10466},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"import * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":315},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4879},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7246},"client/src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3835},"client/src/components/ui/drawer.tsx":{"content":"import * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3007},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7361},"client/src/components/ui/form.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4085},"client/src/components/ui/hover-card.tsx":{"content":"import * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1184},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":845},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"import * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst MenubarMenu = MenubarPrimitive.Menu\n\nconst MenubarGroup = MenubarPrimitive.Group\n\nconst MenubarPortal = MenubarPrimitive.Portal\n\nconst MenubarSub = MenubarPrimitive.Sub\n\nconst MenubarRadioGroup = MenubarPrimitive.RadioGroup\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":7974},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5046},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1230},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":777},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"import { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1709},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5615},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"import * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4267},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        if (setOpenProp) {\n          return setOpenProp?.(\n            typeof value === \"function\" ? value(open) : value\n          )\n        }\n\n        _setOpen(value)\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${open}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full text-sidebar-foreground has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23337},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-gray-700\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-gradient-to-r from-cyan-500 to-blue-600\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full bg-white border-2 border-blue-500 ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1104},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":772},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"import * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1739},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1435},"client/src/components/ui/tooltip.tsx":{"content":"import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1145},"README.md":{"content":"# Sablia - Automatisation Intelligente\n\nSite web moderne de conseil en automatisation d'entreprise avec calculateur ROI, formulaires de génération de leads et présentation des services.\n\n## 🏗️ Architecture\n\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + TypeScript\n- **Base de données**: PostgreSQL + Drizzle ORM\n- **Styling**: Tailwind CSS + Radix UI\n- **Déploiement**: Vercel\n\n## 🚀 Installation\n\n### Prérequis\n\n- Node.js 18+\n- PostgreSQL (local ou distant)\n\n### Configuration locale\n\n1. **Cloner le projet**\n   ```bash\n   git clone https://github.com/BriGadja/sablia-site.git\n   cd sablia-site\n   ```\n\n2. **Installer les dépendances**\n   ```bash\n   npm install\n   ```\n\n3. **Configuration de l'environnement**\n   ```bash\n   cp .env.example .env\n   ```\n   Puis modifier le fichier `.env` avec vos propres valeurs.\n\n4. **Configuration de la base de données**\n   ```bash\n   # Pousser le schéma vers la base de données\n   npm run db:push\n   ```\n\n5. **Lancer en développement**\n   ```bash\n   npm run dev\n   ```\n\n   L'application sera accessible sur `http://localhost:5000`\n\n## 📦 Scripts disponibles\n\n- `npm run dev` - Lance le serveur de développement\n- `npm run build` - Build pour la production\n- `npm run start` - Lance l'application en production\n- `npm run check` - Vérification TypeScript\n- `npm run db:push` - Pousse le schéma vers la base de données\n\n## 🌐 Déploiement\n\n### Vercel\n\n1. Connecter votre repository GitHub à Vercel\n2. Configurer les variables d'environnement dans Vercel\n3. Le déploiement se fera automatiquement\n\n## 🏗️ Structure du projet\n\n```\n├── client/              # Frontend React\n│   ├── src/\n│   │   ├── components/  # Composants réutilisables\n│   │   ├── pages/       # Pages de l'application\n│   │   ├── lib/         # Utilitaires et configuration\n│   │   └── hooks/       # React hooks personnalisés\n│   └── index.html\n├── server/              # Backend Express\n│   ├── routes.ts        # Routes API\n│   ├── index.ts         # Point d'entrée serveur\n│   └── vite.ts          # Configuration Vite\n├── db/                  # Schéma base de données\n│   └── schema.ts\n└── migrations/          # Migrations de base de données\n```\n\n## 🔧 Configuration\n\n### Variables d'environnement\n\n- `DATABASE_URL` - URL de connexion PostgreSQL\n- `NODE_ENV` - Environnement (development/production)\n\n### Intégrations\n\n- **Voiceflow**: Chatbot intégré pour le support client\n- **Calendly**: Système de prise de rendez-vous\n- **TSParticles**: Animations de fond\n\n## 🎨 Fonctionnalités\n\n- ✅ Calculateur ROI interactif\n- ✅ Formulaires de génération de leads\n- ✅ Design responsive et moderne\n- ✅ Animations fluides\n- ✅ Chatbot intégré\n- ✅ Interface administrateur\n\n## 📝 Licence\n\nMIT","size_bytes":2893},"MIGRATION_GUIDE.md":{"content":"# 🚀 Guide de Migration - Replit vers GitHub/Vercel\n\nCe guide vous accompagne pour migrer votre projet Sablia de Replit vers un environnement de développement local avec déploiement sur Vercel.\n\n## ✅ Préparatifs (Déjà fait)\n\nLes fichiers suivants ont été créés/modifiés automatiquement :\n- ✅ `.gitignore` - Fichiers à ignorer par Git\n- ✅ `.env.example` - Template des variables d'environnement\n- ✅ `README.md` - Documentation du projet\n- ✅ `vercel.json` - Configuration de déploiement Vercel\n- ✅ `.vercelignore` - Fichiers à ignorer lors du déploiement\n- ✅ Suppression des packages Replit spécifiques\n- ✅ Application du thème sombre par défaut\n\n## 🔧 Étape 1 : Correction manuelle nécessaire\n\n**IMPORTANT** : Avant de continuer, vous devez modifier le fichier `vite.config.ts` :\n\n```typescript\n// Remplacez le contenu actuel par :\nimport { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path, { dirname } from \"path\";\nimport { fileURLToPath } from \"url\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nexport default defineConfig({\n  plugins: [react()],\n  resolve: {\n    alias: {\n      \"@db\": path.resolve(__dirname, \"db\"),\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});\n```\n\n## 💻 Étape 2 : Setup local (Sur votre PC)\n\n### 2.1 Prérequis\n- Node.js 18+ installé\n- Git installé\n- VS Code ou votre éditeur préféré\n\n### 2.2 Récupération du code\n```bash\n# Dans votre dossier projets\ncd C:\\Users\\pc\\Documents\\Projets\n\n# Cloner le repository\ngit clone https://github.com/BriGadja/sablia-site.git\n\n# Aller dans le dossier\ncd sablia-site\n\n# Installer les dépendances\nnpm install\n```\n\n### 2.3 Configuration de l'environnement\n```bash\n# Copier le template d'environnement\ncopy .env.example .env\n\n# Éditer le fichier .env avec vos vraies valeurs\nnotepad .env\n```\n\n## 🗄️ Étape 3 : Configuration de la base de données\n\n### 3.1 Base de données locale (Option recommandée pour le développement)\n```bash\n# Installer PostgreSQL localement ou utiliser un service cloud\n# Puis mettre à jour votre .env avec l'URL de connexion\n\n# Pousser le schéma vers la base\nnpm run db:push\n```\n\n### 3.2 Base de données cloud (Neon, Supabase, etc.)\n1. Créer une base PostgreSQL sur Neon/Supabase\n2. Copier l'URL de connexion dans votre `.env`\n3. Exécuter `npm run db:push`\n\n## 🚀 Étape 4 : Initialisation Git et GitHub\n\n### 4.1 Initialiser Git\n```bash\n# Dans le dossier sablia-site\ngit init\ngit add .\ngit commit -m \"Initial commit\"\n```\n\n### 4.2 Lier à GitHub\n```bash\ngit remote add origin https://github.com/BriGadja/sablia-site.git\ngit branch -M main\ngit push -u origin main\n```\n\n## ⚡ Étape 5 : Déploiement sur Vercel\n\n### 5.1 Connexion du repository\n1. Aller sur [vercel.com](https://vercel.com)\n2. Se connecter avec votre compte GitHub\n3. Cliquer sur \"New Project\"\n4. Sélectionner votre repository `sablia-site`\n5. Vercel détectera automatiquement la configuration\n\n### 5.2 Variables d'environnement Vercel\nDans les paramètres du projet Vercel, ajouter :\n- `DATABASE_URL` : URL de votre base PostgreSQL\n- `NODE_ENV` : `production`\n\n### 5.3 Configuration domaine (si nécessaire)\n1. Dans Vercel > Settings > Domains\n2. Ajouter votre domaine personnalisé\n3. Configurer les redirections DNS\n\n## 🌐 Étape 6 : Configuration DNS/OVH\n\n### 6.1 Configuration DNS\nSi vous utilisez OVH pour votre domaine :\n1. Aller dans l'espace client OVH\n2. Section \"Domaines\" > Votre domaine > \"Zone DNS\"\n3. Ajouter/modifier les enregistrements :\n   - Type `A` : Pointer vers l'IP de Vercel\n   - Type `CNAME` : `www` vers votre domaine Vercel (ex: `sablia-site.vercel.app`)\n\n### 6.2 Certificat SSL\n- Vercel gère automatiquement les certificats SSL\n- Aucune configuration supplémentaire nécessaire\n\n## 🔄 Étape 7 : Workflow de développement\n\n### 7.1 Développement local\n```bash\n# Lancer le serveur de développement\nnpm run dev\n\n# L'application sera accessible sur http://localhost:5000\n```\n\n### 7.2 Déploiement\n```bash\n# Après vos modifications\ngit add .\ngit commit -m \"Description des changements\"\ngit push origin main\n\n# Vercel déploiera automatiquement\n```\n\n## 📋 Checklist finale\n\n- [ ] Fichier `vite.config.ts` modifié manuellement\n- [ ] Code récupéré localement\n- [ ] Base de données configurée\n- [ ] Variables d'environnement définies\n- [ ] Code poussé sur GitHub\n- [ ] Projet déployé sur Vercel\n- [ ] Domaine configuré (si applicable)\n- [ ] Tests de fonctionnement\n\n## 🛠️ Commandes utiles\n\n```bash\n# Développement\nnpm run dev          # Lancer le serveur de développement\nnpm run build        # Build pour production\nnpm run start        # Lancer en production\nnpm run check        # Vérification TypeScript\nnpm run db:push      # Mettre à jour le schéma DB\n\n# Git\ngit status           # Voir les changements\ngit add .            # Ajouter tous les fichiers\ngit commit -m \"msg\"  # Commit avec message\ngit push             # Pousser vers GitHub\n```\n\n## 🆘 Dépannage\n\n### Erreur de base de données\n- Vérifier l'URL dans `.env`\n- Exécuter `npm run db:push`\n\n### Erreur de build\n- Vérifier que `vite.config.ts` a été modifié\n- Exécuter `npm install`\n\n### Problème de déploiement\n- Vérifier les variables d'environnement Vercel\n- Consulter les logs de déploiement\n\n---\n\n🎉 **Félicitations !** Votre site est maintenant prêt pour le développement local et le déploiement automatique !","size_bytes":5599}},"version":1}